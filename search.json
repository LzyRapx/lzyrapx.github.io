[{"title":"【数学】Project-Euler 解説","url":"http://lzyrapx.xyz/2025/01/01/【数学】Project-Euler 解説/","content":"<ul>\n<li><p>p709: O(n^2) dp, 比较容易想到。</p>\n</li>\n<li><p>p708: 求一类积性函数的前缀和，有空尝试一下写 Min_25 筛。</p>\n</li>\n<li><p>p707: 看了一会没啥思路…然后搜了大半小时 paper 和资料，搜到了 <a href=\"https://www.win.tue.nl/~aeb/ca/madness/madrect.html\" target=\"_blank\" rel=\"noopener\">Light Out</a> 这个网站…可能还需要理解一些概念…</p>\n</li>\n<li><p>p706: 四维 dp。</p>\n</li>\n<li><p>p705: 一开始理解错题了…inversion count 显然就是计算逆序对，divided sequence 就是序列中每个数字的因子数乘积。预处理每对数字对 inversion count 的贡献，然后暴力所有质数并记录数字的频率，用乘法原理统计答案即可。</p>\n</li>\n<li><p>p704: 和 Kummer’s theorem 有关…</p>\n</li>\n<li><p>p703: 树形 dp，计算独立集。</p>\n</li>\n<li><p>p702: 建坐标系，发现规律，二的幂次相关，range-counting 类问题。$O(nlogn)$。可以做到 $O(logn * logn)$…这可太难了…</p>\n</li>\n<li><p>p547: 求带洞的正方形中任意两点间距离的期望，从 wuhang 在 p695 的 post 里学了一下拟蒙特卡罗(quasi-Monte Carlo)然后做的…</p>\n</li>\n<li><p>p539: 找规律。$P(2k)=P(2k+1)=2k-2P(k)+2$, $S(2k)=2k^2+4k-1-2P(k)-4S(k-1)$, $S(2k+1)=2k^2+6k+1-4S(k)$。</p>\n</li>\n<li><p>p487: 多项式及其求和。其实就是伯努利多项式。然后看到 Min_25 将它推广了…搞了个任意模数 NTT….学不来…  </p>\n</li>\n<li><p>p479: 韦达定理…等比数列求和…</p>\n</li>\n<li><p>p476: Malfatti circles, 贪心，只有一种放法可以使得面积最大，但我不会证明…不过有 paper 证明了…</p>\n</li>\n<li><p>p475: dp….看到可以将题目转化为图的计数的神奇做法…</p>\n</li>\n<li><p>p442: 二分 + AC 自动机上DP…</p>\n</li>\n<li><p>p441: 莫比乌斯反演, 那个求和只要差分一下就变成调和级数了。 $O(nlogn)$。可以做到 $O(n^{2/3} (\\log n)^{1/3})$。</p>\n</li>\n<li><p>p430: 第 $i$ 个盘子没有被翻转的概率是 $p = \\frac{(i - 1)^2 + (N - i)^2}{N^2}$，$prob(k)$ 表示在 $k$ 轮后白面向上的盘子数目的概率。$prob(k) = prob(k - 1) * p + (1 - prob(k - 1)) * (1 - p)$ =&gt; $prob(k) = \\frac{1 + (2q - 1)^k}{2}$，显然，计算 $(2q - 1)^m$ 时，让 $(2q - 1)^m$ 足够小即可。那么答案就是 $\\frac{n}{2} + \\sum_{k=1}^n {prob(k)}$。</p>\n</li>\n<li><p>p417: 可以发现，$L(k) = L(k * 2), L(k) = L(k * 5)$, 其中，$k \\mod 2 = 0$ or $k \\mod 5 = 0$。 $L(k) = x$, 满足最小正整数 $x$, $10^x \\mod k = 1$ &amp;&amp; $phi(k) \\mod L(k) = 0$。时间复杂度：$O(nlog^2 n)$。</p>\n</li>\n<li><p>p343: 可以发现，$f(k) = largest\\_prime\\_factor(k+1)-1$, $k^3 + 1 = (k + 1) * (k^2 - k + 1)$, $f(k^3) = largest\\_prime\\_factor(k^3+1)-1$ =&gt; $largest\\_prime\\_factor((k + 1) * (k^2 - k + 1))-1$ =&gt; $max(largest\\_prime\\_factor(k + 1), (k^2 - k + 1)) - 1$。</p>\n</li>\n<li><p>p333: dp。$dp[i][j]$ 表示对于 $i$ 可以满足 $i = \\sum_{}{2^x3^y}$ 的 partition 的个数，其中， $y &lt;= j$。所以 $j$ 的上限是 $log_3{1000000}$。</p>\n</li>\n<li><p>p317: 物理题. 考虑两种最极端的情况: (1) 垂直向上射出, 可以算出一个最高点。 (2) 水平射出, 可以算出一个最远点。连接这两个点就是一条抛物线，求这个抛物线的包络线就可以了。需要花时间 re-learn 一下以前简单的物理公式，然后直接推导出公式即可。抛物线体的体积计算：<a href=\"https://mathworld.wolfram.com/Paraboloid.html\" target=\"_blank\" rel=\"noopener\">Paraboloid</a>。高中物理里的斜抛物体最高上升高度 $h=\\frac{v^2}{2g}$。</p>\n</li>\n<li><p>p303: 简单的 bfs。用 python 写会很慢(用 list 实现 queue)，加了剪枝才快，不加剪枝很慢，换成 C++ 不加剪枝都很快…因此建议用 C++ 写，但是 $f(9999)$ 爆 long long 了。这个甚至可以直接 OEIS。</p>\n</li>\n<li><p>p297: 找规律，<a href=\"http://oeis.org/A007895\" target=\"_blank\" rel=\"noopener\">A007895</a>。可以发现一些递归结构。需要记忆化。$z(m) = z(f(n)) + z(m-f(n)) + m-f(n)$, $f(n)$是小于 $n$ 中最大的 fibonacci number。</p>\n</li>\n<li><p>p288: 直接根据阶乘的中质因子 $p$ 的个数的公式计算。$p^n!$ 的 质因子 $p$ 的个数是 $\\frac{p^n - 1}{p - 1}$</p>\n</li>\n<li><p>p226: Simpson 积分…</p>\n</li>\n<li><p>p200: Miller-Rabin…暴力…</p>\n</li>\n<li><p>p178: 四维dp。</p>\n</li>\n<li><p>p162: 容斥原理直接手算….发现 MuthuVeerappanR 这人就喜欢啥题都用生成函数去做…还有人将 16 个数字推广到 n 个数字的…</p>\n</li>\n<li><p>p160: 找出 $10^{12}!$ 的最后非零五项。中国剩余定理 或者 利用 last5Digit($n$) = last5Digit($n * 5^x$) 即，last5Digit($10^{12}$) = last5Digit($2560000$) 或者 wolframalpha。</p>\n</li>\n<li><p>p159: dp。递推式: $mdrs(n) = max(drs(n), mdrs(a) + mdrs(b))$, $a * b == n$。</p>\n</li>\n<li><p>p158: 对于每个 $n$, 答案就是 <a href=\"https://en.wikipedia.org/wiki/Eulerian_number\" target=\"_blank\" rel=\"noopener\">Eulerian_number</a>, $A(n, 1) = 2^n-n-1$, 因此, $p(n)=(2^{n}-n-1)\\binom{26}{n}$</p>\n</li>\n<li><p>p157: 简单推导变换后，暴力枚举+分解质因数</p>\n</li>\n<li><p>p156: $f(n, d)$ 的数位dp + 剪枝</p>\n</li>\n</ul>\n","categories":["人生"],"tags":["数学"]},{"title":"【数学】原神抽卡概率期望分析","url":"http://lzyrapx.xyz/2021/10/16/【数学】原神抽卡概率期望分析/","content":"<h1 id=\"原神官方抽卡一般规则\"><a href=\"#原神官方抽卡一般规则\" class=\"headerlink\" title=\"原神官方抽卡一般规则\"></a>原神官方抽卡一般规则</h1><h2 id=\"角色池规则\"><a href=\"#角色池规则\" class=\"headerlink\" title=\"角色池规则\"></a>角色池规则</h2><ul>\n<li>角色池为单 UP 池。</li>\n<li>五星角色祈愿的基础概率为 $0.600$%， 综合概率(含保底) 为 $1.600$%， 最多 $90$ 次祈愿内必定能通过保底获取五星角色。</li>\n<li>当祈愿获取到五星角色时，有 $50.000$% 的概率为本期该池的 UP 角色。(即存在歪了的可能性)。</li>\n<li>如果本次祈愿获取的五星角色非本期该池的 UP 角色，下次祈愿获取的五星角色必定为本期五星 UP 角色。(不可能连续两次歪)。</li>\n</ul>\n<h2 id=\"武器池规则\"><a href=\"#武器池规则\" class=\"headerlink\" title=\"武器池规则\"></a>武器池规则</h2><ul>\n<li>武器池为双 UP 池。</li>\n<li>五星武器祈愿的基础概率为 $0.7000$%，综合概率(含保底)为 $1.850$%，最多 $80$ 次 祈愿必定能通过保底获取五星武器。</li>\n<li>当祈愿获取到五星武器时，有 $75.000$% 的概率为本期五星 UP 武器中两个中的一个。如果本次祈愿获取的五星武器非本期五星 UP 武器时，下次祈愿获取的五星武器必定为本期五星 UP 武器。在未通过命定值达到满值获取定轨武器的情况下，当祈愿获取到五星 UP 物体时，每把本期五星 UP 武器的获取概率均等。</li>\n</ul>\n<h1 id=\"抽出一个五星角色期望需要多少抽？\"><a href=\"#抽出一个五星角色期望需要多少抽？\" class=\"headerlink\" title=\"抽出一个五星角色期望需要多少抽？\"></a>抽出一个五星角色期望需要多少抽？</h1><p>根据官方抽卡规则，抽卡可以认为是重复独立的伯努利实验，角色池的综合出金率为 $P_{角色}$ = $1.600$%。<br>即抽出五星角色的抽卡次数 $X_{角色}$ 服从几何分布。即：<br>$$P(X_{角色}=n)=P_{角色}*(1-P_{角色})^{n-1}$$</p>\n<p>根据几何分布的期望公式,</p>\n<p>$$E=\\frac{1}{P_{角色}}=62.5$$ </p>\n<p>即期望平均需要抽 $62.5$ 抽可出一个五星角色。</p>\n<h1 id=\"抽出一个五星武器期望需要多少抽？\"><a href=\"#抽出一个五星武器期望需要多少抽？\" class=\"headerlink\" title=\"抽出一个五星武器期望需要多少抽？\"></a>抽出一个五星武器期望需要多少抽？</h1><p>同理，因为武器池的综合出金率为 $P_{武器}$ = 1.85%， 因此, </p>\n<p>$$E=\\frac{1}{P_{武器}} \\approx 54$$</p>\n<p>即期望平均需要抽约 $54$ 抽可出一个五星武器。</p>\n<h1 id=\"抽出一个满命五星角色期望需要出多少次金？\"><a href=\"#抽出一个满命五星角色期望需要出多少次金？\" class=\"headerlink\" title=\"抽出一个满命五星角色期望需要出多少次金？\"></a>抽出一个满命五星角色期望需要出多少次金？</h1><p>假设氪佬抽出满命后就停止抽卡，则氪佬需要将 UP 角色抽出 $7$ 次，假设抽卡分布如下：</p>\n<p>() 中 () 中 () 中 () 中 () 中 () 中 () 中</p>\n<p>其中，“中”代表抽中 UP 角色，“()”代表可能出现歪的位置，共计 $7$ 个。如果歪了 $n$ 次（必有$n≤7$），则共有 $C_{7}^{n}$  种情况，每一种情况出现的概率为：</p>\n<p>$${0.5}^{n} * 1^{n}*{0.5}^{7-n}＝{0.5}^{7}$$</p>\n<p>其中，第一个 $0.5^n$ 指歪了 $n$ 次，$1^n$ 指歪了之后下一次 $100$％ 出 UP 角色，$0.5^{7-n}$指有 $7$-$n$ 次在没歪的情况下出 UP 角色，因此抽满命过程中歪 $n$ 次出现的概率为:</p>\n<p>$$P(X_{歪}=n)=C_{7}^{n}*{0.5}^{7}$$</p>\n<p>最后得到抽出满命的平均期望出金次数 $E_{满命}$ 为:</p>\n<p>$$E_{满命}=\\sum_{n=1}^{7} (7+n) * C_{7}^{n}*{0.5}^{7}=10.5$$</p>\n<p>即期望平均需要出 $10.5$ 次金才可以将一个 UP 角色抽满命。</p>\n<h1 id=\"抽出目标满精武器期望需要出多少次金？\"><a href=\"#抽出目标满精武器期望需要出多少次金？\" class=\"headerlink\" title=\"抽出目标满精武器期望需要出多少次金？\"></a>抽出目标满精武器期望需要出多少次金？</h1><p>不歪的情况下出目标武器的概率为 $P_{不歪}=0.75％*50％＝37.5％$</p>\n<p>歪一次的概率为 $P_{单歪}＝1-P_{不歪}＝62.5％$。</p>\n<p>因为存在<strong>定轨机制</strong>，还要考虑连续歪两次的概率为：</p>\n<p>$P_{双歪}＝P_{单歪}*P_{单歪}＝39.0625％$</p>\n<p>同样假设氪佬抽满精武器后就停止抽卡，假设抽卡分布情况如下：</p>\n<p>() 中 () 中 () 中 () 中 () 中</p>\n<p>其中“中”表示抽出目标武器，“()“的位置可能是“单歪”、“双歪”或者空（相当于不歪）。</p>\n<p>再假设抽卡过程中单歪次数为 $m$，双歪次数为 $n$（必有$m＋n≤5$），则可能的情况有 $C_{5}^{m+n} * C_{m+n}^{n}$种。</p>\n<p>$C_{5}^{m+n}$ 指从5个“()“位置选择 $m＋n$ 个放置单歪和双歪，$C_{m＋n}^{n}$ 指歪的位置确定后再放置单歪和双歪。</p>\n<p>则每种情况出现的概率为: </p>\n<p>$$P_{单歪}^{m} * P_{双歪}^{n} * {1}^{n} * P_{中}^{5-n}$$</p>\n<p>其中，$P_{单歪}^m$ 指出现 $m$ 次单歪的概率，$P_{双歪}^n$ 指出现 $n$ 次双歪的概率，$1^n$ 指双歪后 $100％$ 出目标武器，$P_{中}^{5-n}$ 指有 $5-n$ 次直接出目标武器）。</p>\n<p>因此，抽满精的过程中单歪 $m$ 次，双歪 $n$ 次的概率为:</p>\n<p>$$P(X_{单歪}=m, X_{双歪}=n)=C_{5}^{m+n} * C_{m+n}^{n} * P_{单歪}^m * P_{双歪}^n * 1^n * P_{中}^{5-n}$$</p>\n<p>其中，$m$ 和 $n$ 需要满足约束 $m＋n≤5$ 且 $m，n≥0$，因此可以得到抽卡次数的期望为:</p>\n<p>$$E_{满精}=\\sum_{m+n≤5且m,n≥0}{}(5+m+2n) * C_{5}^{m+n} * C_{m+n}^{n} * P_{单歪}^m * P_{双歪}^n * 1^n * P_{中}^{5-n}$$</p>\n<p>在 $m＋n≤5$ 和 $m，n≥0$ 的约束下, $(m，n)$一共有 $35$ 种组合，穷举所有组合并代入上式可以得到:</p>\n<p>$$E_{满精}＝10.078125≈10$$</p>\n<p>即武器池期望大约是需要出 $10$ 次金才可以将目标武器抽满精。</p>\n<h1 id=\"抽出满精武器满命角色期望需要花费多少钱？\"><a href=\"#抽出满精武器满命角色期望需要花费多少钱？\" class=\"headerlink\" title=\"抽出满精武器满命角色期望需要花费多少钱？\"></a>抽出满精武器满命角色期望需要花费多少钱？</h1><p>综上分析，抽出满命满精角色的平均抽卡次数为：</p>\n<p>$$E_{满命}＊E_{角色}＋E_{满精}*E_{武器}=1201.01≈1201$$</p>\n<p>一单 $648$ rmb 平均能抽 $52$ 次，因此一个满命角色满精武器需要花费:</p>\n<p>$$\\frac{648*1201}{52}=14966≈15000 rmb$$</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><ul>\n<li>期望平均需要抽 $62.5$ 抽可出一个五星角色。</li>\n<li>期望平均需要抽 $54$ 抽可出一个五星武器。</li>\n<li>期望平均需要出 $10.5$ 次金才可以将一个 UP 角色抽满命。</li>\n<li>期望平均需要出 $10$ 次金才可以将目标武器抽满精。</li>\n<li>抽出满精武器满命角色期望需要花费 $15000$ rmb。</li>\n</ul>\n","categories":["游戏"],"tags":["数学"]},{"title":"【算法】2021百度之星复赛 Tutorial","url":"http://lzyrapx.xyz/2021/08/31/【算法】2021百度之星复赛-Tutorial/","content":"<h1 id=\"1001\"><a href=\"#1001\" class=\"headerlink\" title=\"1001\"></a>1001</h1><p>特殊处理 $n \\leq 2$ 的情况。当 $n=k$ 时构造是容易的，当 $k \\bmod 2 = 1$ 时可以发现字符串 $ababab\\cdots$ 的长度为 $n$ 的前缀总是满足题设条件，故答案为 Yes。对于其他情况，即 $n&gt;k$ 且 $k \\bmod 2 = 0$ 的情况，可以将回文串条件可以导出的字符之间相等关系以边的方式画出来，容易证明字符之间总是两两相等，故答案为 No。 </p>\n<h1 id=\"1002\"><a href=\"#1002\" class=\"headerlink\" title=\"1002\"></a>1002</h1><p>首先一个算式肯定是加法和乘法交替的。对于每组连续的加法或者乘法，如果组内的元素是相同的，那么运算的结果也是一样的。假设分成了 $x$ 组加法和 $y$ 组乘法，满足 $|x-y|\\leq  1$，那么加法和乘法的分组都是独立的。问题等价于将 $n$ 个有标号的球分到 $m$ 个有标号的集合里面，使得每个集合都是非空的。这个问题可以用第二类斯特灵数简单解决。</p>\n<p>所以总的时间复杂度是 $O(m^2+Tm)$ 的。</p>\n<h1 id=\"1003\"><a href=\"#1003\" class=\"headerlink\" title=\"1003\"></a>1003</h1><p>答案上界显然是 $\\sum_{i=1}^n b_i$，即每次操作都让一个点的 $b_i$ 减去 1。考虑在这样的操作基础上将若干次操作合并为一次合法的操作从而减少总操作次数。在树上 dfs，对于每个节点维护其子树尽可能合并后当前节点还有多少个操作能和父亲合并，每个节点计算完所有儿子的子树的答案后贪心地与儿子合并操作。可以发现在可以与儿子合并操作的前提下与儿子合并总是不会比与父亲合并差，所以这样贪心是正确的。记录合并操作次数和即可求得答案。</p>\n<h1 id=\"1004\"><a href=\"#1004\" class=\"headerlink\" title=\"1004\"></a>1004</h1><p>对于一个确定的序列设 $w_{l,r} = \\sum_{i=l}^r \\sum_{j=l}^r \\mathrm{dist}(a_i,a_j)$，对于一个给定的序列 ${a_1,a_2,\\cdots,a_n}$ 容易设计动态规划 $f_{i,j}$ 表示对区间 $[i,j]$ 建立线段树的最小暴跳次数，转移枚举 $\\mathrm{mid}$ 的取值，有 $f_{i,j} = \\min_{mid=l}^{r-1}f_{l,mid}+f_{mid+1,r}+w_{l,r}$。可以注意到 $w_{l,r}$ 满足四边形不等式，故 $f_{i,j}$ 的转移满足决策单调性，即设 $k_{i,j}$ 表示 $f_{i,j}$ 的转移中取到最小值的 $\\mathrm{mid}$ 取值，则 $k_{i,j-1} \\leq k_{i,j} \\leq k_{i+1,j}$。按照长度依次转移，转移 $f_{i,j}$ 时只枚举区间 $[k_{i,j-1},k_{i+1,j}]$ 中的转移点，复杂度为 $O(n^2)$。对于加入版本的操作，建立出操作树在上面 dfs，每次相当于加入一个元素，新增一列 dp 数组。这一列数组的转移仍然满足决策单调性，使用单调栈求解。需要注意这里不能使用枚举转移点的方式优化，因为其是均摊的，可以被卡到高复杂度。精细实现 $w_{l,r}$ 的求解即可做到 $O(T(m^2+n^2+nr\\log n))$ 的时间复杂度。</p>\n<h1 id=\"1005\"><a href=\"#1005\" class=\"headerlink\" title=\"1005\"></a>1005</h1><p><del>根据 1002 题的结果，如果直接搜索本质不同的方法，会比较难在时限内通过。</del></p>\n<p>直接搜索就行了。</p>\n<p>注意到，假设我们枚举完乘法的顺序，那么我们每个加法操作的贡献只和它们的位置相关，也就是插在哪几个乘法之间，并且是独立的。所以等价于每个加法操作有若干种选择，你要选择数字加起来使得 $\\bmod p$ 最小。那么可以用 meet in middle 的方法解决。</p>\n<p>然后如果乘法个数大于7的情况，可以直接搜索，会比 meet in middle 快。</p>\n<h1 id=\"1006\"><a href=\"#1006\" class=\"headerlink\" title=\"1006\"></a>1006</h1><p>首先我们考虑每对点，对答案计算贡献。一对点 $i, j$ 对答案有贡献，当且仅当 $a_i=a_j$ 并且 $i$ 到 $j$ 之间的最大值和最小值都在 $l,r$ 之间。</p>\n<p>对于每个数，如果出现了不超过 $B$ 次，那么我们可以把所有这样的点对求出来，一共不会超过 $O(nB)$ 对，区间内的最大值和最小值都可以用 $O(1)$ 的 RMQ 解决，也可以在求出每对相邻点区间内的最大值和最小值之后进行递推，这样一共只需要查 $O(n)$ 次 RMQ，用 $O(\\log n)$ 也可以。把这些点对都拿出来之后，容易发现是个二维数点问题，可以通过扫描线解决。注意这里如果用树状数组做，时间复杂度可能会多一个 $\\log$。但是修改操作比询问操作多很多，所以可以用修改 $O(1)$，询问 $O(\\sqrt{n})$ 的分块做法解决。这部分的时间复杂度是 $O(nB+m\\sqrt{n})$ 的。</p>\n<p>如果出现次数超过了 $B$ 次，我们考虑每种数字单独解决。假设这个数字出现了 $k$ 次，那么这个数字每次出现的段里的最大值和最小值，会把值域划分成 $O(k)$ 段。如果询问对应的 $l,r$ 在值域中是同一段，那么答案也是一样的。所以我们可以把询问离散化，离散化之后使用莫队算法解决。这里在莫队算法的时候需要维护连续段，我们可以用不删除莫队+链表，就能在 $O(1)$ 的额外代价完成转移。时间复杂度是 $O(k\\sqrt{m}+m)$ 的。所以后一半的时间复杂度是 $O(n\\sqrt{m}+nm/B)$ 的。</p>\n<p>取 $B=\\sqrt{m}$，总的时间复杂度是 $O(n\\sqrt{m}+m\\sqrt{n})$。注意到后半部分的时间复杂度来自于求和的分块，我们可以把求和的结构改成 $t$ 层，每层 $n^{1/t}$。后半部分可以被改进到 $O(mn^{1/t})$。</p>\n","categories":["人生"],"tags":["算法"]},{"title":"【音乐】指弹记录","url":"http://lzyrapx.xyz/2021/08/09/【音乐】指弹记录/","content":"<p>ß</p>\n<h1 id=\"标准调弦\"><a href=\"#标准调弦\" class=\"headerlink\" title=\"标准调弦\"></a>标准调弦</h1><h2 id=\"E-A-D-G-B-E\"><a href=\"#E-A-D-G-B-E\" class=\"headerlink\" title=\"E-A-D-G-B-E\"></a>E-A-D-G-B-E</h2><h4 id=\"押尾コータロー\"><a href=\"#押尾コータロー\" class=\"headerlink\" title=\"押尾コータロー\"></a>押尾コータロー</h4><p>《Indigo Love》《家路》《HEART BEAT!》《DREAMING》《Fight》《風の詩》《桜・咲くころ》《黄昏》《ファイト!》《Red Shoes Dance》《Passion》</p>\n<h4 id=\"Andy-Mckee\"><a href=\"#Andy-Mckee\" class=\"headerlink\" title=\"Andy Mckee\"></a>Andy Mckee</h4><p>《Ebon Coast》</p>\n<h1 id=\"特殊调弦\"><a href=\"#特殊调弦\" class=\"headerlink\" title=\"特殊调弦\"></a>特殊调弦</h1><h2 id=\"D-A-D-G-A-D\"><a href=\"#D-A-D-G-A-D\" class=\"headerlink\" title=\"D-A-D-G-A-D\"></a>D-A-D-G-A-D</h2><h4 id=\"押尾コータロー-1\"><a href=\"#押尾コータロー-1\" class=\"headerlink\" title=\"押尾コータロー\"></a>押尾コータロー</h4><p>《wings you are the hero》《Splash》《Big Blue Ocean》</p>\n<h4 id=\"岸部眞明\"><a href=\"#岸部眞明\" class=\"headerlink\" title=\"岸部眞明\"></a>岸部眞明</h4><p>《夏の终わりの海》《Hajimari》《树氷の辉き》《远い记忆》《风、走る》《Truth》</p>\n<h2 id=\"D-A-D-G-B-D\"><a href=\"#D-A-D-G-B-D\" class=\"headerlink\" title=\"D-A-D-G-B-D\"></a>D-A-D-G-B-D</h2><p>《TREASURE》</p>\n<h2 id=\"D-A-D-G-A-C\"><a href=\"#D-A-D-G-A-C\" class=\"headerlink\" title=\"D-A-D-G-A-C\"></a>D-A-D-G-A-C</h2><p>《Merry Christmas Mr. Lawrence》</p>\n<h2 id=\"C-G-D-G-A-D\"><a href=\"#C-G-D-G-A-D\" class=\"headerlink\" title=\"C-G-D-G-A-D\"></a>C-G-D-G-A-D</h2><h4 id=\"GIN\"><a href=\"#GIN\" class=\"headerlink\" title=\"GIN\"></a>GIN</h4><p>《愿樱》《The Gift》《蕾》《It’s you》</p>\n<h4 id=\"岸部眞明-1\"><a href=\"#岸部眞明-1\" class=\"headerlink\" title=\"岸部眞明\"></a>岸部眞明</h4><p>《Black Baccara》《Time Travel》《Convertible》《fu-ta-ri》《Wonderful Tonight》《流れ行く云》《流星》《Heartstrings》</p>\n<h2 id=\"C-G-D-F-A-D\"><a href=\"#C-G-D-F-A-D\" class=\"headerlink\" title=\"C-G-D-F-A-D\"></a>C-G-D-F-A-D</h2><h3 id=\"GIN-1\"><a href=\"#GIN-1\" class=\"headerlink\" title=\"GIN\"></a>GIN</h3><p>《願い》</p>\n<h2 id=\"C-G-D-G-B-D\"><a href=\"#C-G-D-G-B-D\" class=\"headerlink\" title=\"C-G-D-G-B-D\"></a>C-G-D-G-B-D</h2><h4 id=\"押尾コータロー-2\"><a href=\"#押尾コータロー-2\" class=\"headerlink\" title=\"押尾コータロー\"></a>押尾コータロー</h4><p>《Departure》《Landscape》《Believe》《First Love》</p>\n<h2 id=\"E-A-D-G-B-D\"><a href=\"#E-A-D-G-B-D\" class=\"headerlink\" title=\"E-A-D-G-B-D\"></a>E-A-D-G-B-D</h2><h4 id=\"押尾コータロー-3\"><a href=\"#押尾コータロー-3\" class=\"headerlink\" title=\"押尾コータロー\"></a>押尾コータロー</h4><p>《Misty Night》</p>\n<h2 id=\"C-A-D-D-A-B\"><a href=\"#C-A-D-D-A-B\" class=\"headerlink\" title=\"C-A-D-D-A-B\"></a>C-A-D-D-A-B</h2><h4 id=\"GIN-2\"><a href=\"#GIN-2\" class=\"headerlink\" title=\"GIN\"></a>GIN</h4><p>《竹取物语》</p>\n<h2 id=\"D-A-D-F-A-D\"><a href=\"#D-A-D-F-A-D\" class=\"headerlink\" title=\"D-A-D-F#-A-D\"></a>D-A-D-F#-A-D</h2><h4 id=\"岸部眞明-2\"><a href=\"#岸部眞明-2\" class=\"headerlink\" title=\"岸部眞明\"></a>岸部眞明</h4><p>《奇迹の山》《花》《少年の梦》《November》《云の海》《雨降ゐ窗邊で》《遥かなる富士》《Dandelion》《春、来る》《山顶夕景》《里山の夏》《紅葉》《All together》</p>\n<h2 id=\"D-A-D-F-B-D\"><a href=\"#D-A-D-F-B-D\" class=\"headerlink\" title=\"D-A-D-F#-B-D\"></a>D-A-D-F#-B-D</h2><h4 id=\"小松原俊\"><a href=\"#小松原俊\" class=\"headerlink\" title=\"小松原俊\"></a>小松原俊</h4><p>《くじら》</p>\n<h2 id=\"C-G-E-F-B-E\"><a href=\"#C-G-E-F-B-E\" class=\"headerlink\" title=\"C#-G#-E-F#-B-E\"></a>C#-G#-E-F#-B-E</h2><h4 id=\"押尾\"><a href=\"#押尾\" class=\"headerlink\" title=\"押尾\"></a>押尾</h4><p>《Brand New Wings》《Mother》《彼方へ》</p>\n<h2 id=\"A-E-E-F-B-E\"><a href=\"#A-E-E-F-B-E\" class=\"headerlink\" title=\"A-E-E-F#-B-E\"></a>A-E-E-F#-B-E</h2><h4 id=\"押尾-1\"><a href=\"#押尾-1\" class=\"headerlink\" title=\"押尾\"></a>押尾</h4><p>《Earth Angel》</p>\n","categories":["人生"],"tags":["音乐"]},{"title":"【算法】2021百度之星初赛一 Tutorial","url":"http://lzyrapx.xyz/2021/08/02/【算法】2021百度之星初赛一Tutorial/","content":"<h1 id=\"1001\"><a href=\"#1001\" class=\"headerlink\" title=\"1001\"></a>1001</h1><p>如果不考虑附魔，我们建立一个 $n \\times n$ 的矩阵，其中 $a_{ij}$ 表示一步从 $i$ 到 $j$ 的概率（度数的逆元）。求出这个矩阵的 $k$ 次方为矩阵 $b$， $b_{1n}$ 即为答案。</p>\n<p>若考虑附魔，我们将每个点拆成两个点：有附魔的和没附魔的。</p>\n<p>对于每座普通桥，分别在有附魔的两个点和没附魔的两个点间连边。对于每座附魔桥，分别在对应的一个有附魔一个没附魔的点间连边。</p>\n<p>最后用上文方法求出 $1$ 号普通点和 $n$ 号附魔点之间的概率即可。</p>\n<p>单组数据时间复杂度 $O(n^3\\log t)$。</p>\n<h1 id=\"1002\"><a href=\"#1002\" class=\"headerlink\" title=\"1002\"></a>1002</h1><p>枚举含有 $0$ 的列可得</p>\n<p>$q_n = \\sum\\limits_{k=0}^n \\binom nk (2c)^k \\binom{2n-k}{n-k}$</p>\n<p>观察得到</p>\n<p>$q_n = [x^n] (1+2cx)^n (1-x)^{-n-1}$</p>\n<p>考虑逆用另类拉格朗日反演，则</p>\n<p>$\\begin{aligned}<br>[x^n] Q(x) = [x^n] (1+2cx)^n (1-x)^{-n-1} \\<br>= [x^n] \\frac1{1+2cx} \\left(\\frac{x}{x\\frac{1-x}{1+2cx}}\\right)^{n+1} \\<br>= [x^n] \\frac{1+2cx}{1-2x-2cx^2} \\cdot \\frac{1-2x-2cx^2}{(1+2cx)^2} \\cdot \\left(\\frac{x}{x\\frac{1-x}{1+2cx}}\\right)^{n+1}<br>\\end{aligned}$</p>\n<p>因此，令 $G = x\\frac{1-x}{1+2cx}$，$F$ 为 $G$ 的复合逆，则 $Q = \\frac{1+2cF}{1-2F-2cF^2}$。<br>由 $G(F)=x$ 即 $F^2+(2cx-1)F+x=0$ 可以解出</p>\n<p>$F = \\frac{ 1 - 2 c x - \\sqrt{1 - 4 (1 + c) x + 4 c^2 x^2} }2$</p>\n<p>代入可得</p>\n<p>$Q = (4c^2x^2-4(c+1)x+1)^{-1/2}$</p>\n<p>令 $u = 4c^2x^2-4(c+1)x+1$，则</p>\n<p>$2Q’u = - Q u’$</p>\n<p>可以 $O(n)$ 递推 $Q$ 的系数。</p>\n<p>单组数据时间复杂度 $O(n)$。</p>\n<h1 id=\"1003\"><a href=\"#1003\" class=\"headerlink\" title=\"1003\"></a>1003</h1><p>考虑 DP，$f[i][j]$ 表示前 $i$ 个操作后，坏的电脑在 $j$ 的最小代价。</p>\n<p>假设第 $i$ 次交换为 $u_i,v_i$，则 $f[i][u_i]=min(f[i-1][v_i],f[i-1][u_i]+1)$，$f[i][v_i]=min(f[i-1][u_i],f[i-1][v_i]+1)$。</p>\n<p>对于其他的位置，$f$ 不变。</p>\n<p>则利用滚动数组滚掉第一维，DP 转移每次只用修改 $O(1)$ 个位置的 $f$。</p>\n<p>单组数据时间复杂度 $O(m)$。</p>\n<h1 id=\"1004\"><a href=\"#1004\" class=\"headerlink\" title=\"1004\"></a>1004</h1><p>因为 $a\\bmod c=b\\bmod c$，所以一定有 $a-b$ 为 $c$ 的倍数，于是枚举 $a-b$ 的因数进行检查即可。</p>\n<p>注意特判 $a=b$ 的情况，此时如果 $a=1$，则答案为 $-1$，否则答案为 $2,a$。</p>\n<p>单组数据时间复杂度 $O(\\sqrt{\\max(a,b)})$。</p>\n<h1 id=\"1005\"><a href=\"#1005\" class=\"headerlink\" title=\"1005\"></a>1005</h1><p>稍加推导后可得出一个结论：</p>\n<p>当 $1 \\lt +1 \\lt y$ 时，$a_i=a_{i+1}+\\dfrac{1}{n-i}$。</p>\n<p>一波处理可以把原问题等价成一个满足 $x\\le y$ 且 $y \\times 2 \\lt n$ 的问题。</p>\n<p>设 $S=\\sum\\limits_{i=1}^{n-y}a_i$，</p>\n<p>由前面的结论可以得到所有 $a$ 与 $a_{y-1}$ 之间的关系，并用 $a_{y-1}$ 表示出 $S$，</p>\n<p>容易得到 $a_{y-1}=\\dfrac{\\sum\\limits_{i=y}^{n}a_i}{n-y+1}+1=\\dfrac{S}{n-y+1}+1$，</p>\n<p>$S=(n-y+1)(a_{y-1}-1)$，</p>\n<p>结合之前用 $a_{y-1}$ 表示出的 $S$，就有了 $2$ 条方程，代入 $S=(n-y+1)(a_{y-1}-1)$ 后变为一元一次方程，一波操作后解得：</p>\n<p>$a_{y-1}=n-y+1+\\sum\\limits_{i=y}^{n-1}\\sum\\limits_{j=1}^i\\dfrac{1}{j}-(n-y)\\times\\sum\\limits_{i=1}^{n-y+1}\\dfrac{1}{i}$</p>\n<p>通过 $a_{y-1}$ 可求得：</p>\n<p>$a_x=n-y+1+\\sum\\limits_{i=y}^{n-1}\\sum\\limits_{j=1}^i\\dfrac{1}{j}-(n-y+1)\\times\\sum\\limits_{i=1}^{n-y+1}\\frac{1}{i}+\\sum\\limits_{i=1}^{n-x}\\frac{1}{i}$</p>\n<p>在 $O(n)$ 预处理后每次询问可以做到 $O(1)$，总时间复杂度为 $O(n+T)$。</p>\n<h1 id=\"1006\"><a href=\"#1006\" class=\"headerlink\" title=\"1006\"></a>1006</h1><p>我们考虑维护最左边两个 $0$ 的位置，设其依次为 $a,b$。</p>\n<p>若查询时，将 $a$ 设为了 $1$，则答案为 $b$，否则答案为 $a$。</p>\n<p>修改时，若修改了 $a$，则令 $a=b$，之后 $b$ 一直递增，直到找到下一个 $0$。</p>\n<p>若修改了 $b$，则 $b$ 之后一直递增，直到找到下一个 $0$。</p>\n<p>这样整个序列最多被扫过 $2$ 次，总复杂度为 $O(n)$。</p>\n<h1 id=\"1007\"><a href=\"#1007\" class=\"headerlink\" title=\"1007\"></a>1007</h1><p>首先不难想到对每个 $m$，考虑将 $s$ 个儿子各自安排给 $m$ 个根的方案数；再考虑将剩下的 $n-m$ 个点组合成 $s$ 棵有根树的森林的方案数。</p>\n<p>先考虑内层，由经典的 Prufer 序列立刻可知方案数就是</p>\n<p>$\\binom{n-m-1}{s-1} (n-m)^{n-m-s}$</p>\n<p>再考虑外层。显然这就是</p>\n<p>$\\left[\\frac{x^s}{s!}\\right] \\left(\\sum\\limits_{i=0}^k \\frac{x^i}{i!} \\right)^m$</p>\n<p>设</p>\n<p>$F = \\sum\\limits_{i=1}^k \\frac{x^i}{i!}$</p>\n<p>则我们需要计算</p>\n<p>$[x^s] \\frac1{1-u(1+F)}$</p>\n<p>设 $G = F^{&lt;-1&gt;}$ 即 $F$ 的复合逆，根据拉格朗日反演可得答案为</p>\n<p>$\\frac1s [x^{s-1}] \\frac{u}{(1-u(1+x))^2} \\left(\\frac xG\\right)^s$</p>\n<p>若计算出 $G$，则容易从中提取所有 $u^m$ 的系数。</p>\n<p>接下来叙述如何求出 $G$。<br>考虑 $F$ 显然满足 ODE</p>\n<p>$F = F’ + \\frac{x^k}{k!} - 1$</p>\n<p>代入 $x = G$ 得</p>\n<p>$x = \\frac1{G’} + \\frac{G^k}{k!} - 1$</p>\n<p>整理得</p>\n<p>$G’ = \\frac{k!}{k(1+x)-G^k}$</p>\n<p>解如此的一阶 ODE 可以使用牛顿迭代做到 $O(n \\log n)$。<br>也可以转化为半在线卷积，做到 $O(n \\log^2 n)$ 或 $O\\left(\\frac{n \\log^2 n}{\\log \\log n}\\right)$。</p>\n<h1 id=\"1008\"><a href=\"#1008\" class=\"headerlink\" title=\"1008\"></a>1008</h1><p>直接按题意模拟，每次都会死一个人，所以一定停机。</p>\n<p>单组数据时间复杂度 $O(Tn^2)$。</p>\n","categories":["人生"],"tags":["算法"]},{"title":"【人生】赚到人生第一个 100w 是什么感觉？","url":"http://lzyrapx.xyz/2021/07/10/【人生】赚到人生第一个 100w 是什么感觉？/","content":"<h1 id=\"事件\"><a href=\"#事件\" class=\"headerlink\" title=\"事件\"></a>事件</h1><p>毕业两年，终于在自己的 25 岁赚(存)到了人生第一个 100 w 现金 (不包含公积金)。</p>\n<h1 id=\"感觉\"><a href=\"#感觉\" class=\"headerlink\" title=\"感觉\"></a>感觉</h1><p>心情真的毫无波澜……<br>没有什么感觉……<br>该干啥还是干啥……<br>该努力工作还是努力工作……<br>该买不起的还是买不起……<br>没有突破到某个边界前应该都是没什么心情上的波澜和感觉……</p>\n<p><del>人生也不该为钱而活嘛</del>……</p>\n<p>而是为了实现自己在这个社会上甚至说来到这个世界上的人生价值而活……</p>\n","categories":["人生"],"tags":["随笔"]},{"title":"【总结】三年社畜我学到了什么","url":"http://lzyrapx.xyz/2021/06/13/【总结】三年社畜我学到了什么/","content":"<p>社畜三年了，实习一年，正式工作两年。想法很多，但行动终觉得是少了。</p>\n<p>有些想法在我脑中已经酝酿了一段时间。之所以讲出来，倒不是想教会别人什么，而是为了记录自己想法的变化。</p>\n<p>人的想法会很容易会变，但人往往只意识得到自己”当前”的想法。</p>\n<p>因为人脑无法做 Snapshot，所以过去的想法要么随着时间被遗忘，要么演化成了当前的想法。然而即使处于同一演化链条，过去和现在的想法总有些许不同，这些其实很多 case 我们都不会注意到的。</p>\n<p>Snapshot 存在的意义就在于你可以 diff，可以 blame，可以对当前的想法溯源，可以发现过去的自己错在哪里，有哪些地方没有想到。有了这些认识和认知，就能更加准确地评估当前想法的正确性，这在我看来是十分有成长意义的。</p>\n<h1 id=\"技术能力\"><a href=\"#技术能力\" class=\"headerlink\" title=\"技术能力\"></a>技术能力</h1><p>在我看来，技术能力相当于硬技能，无非就是 Coding 和 Design。Coding 能力往往决定了你的工作效率快不快。 design 往往决定了你设计一个系统或者一个需求的高可用性和稳定性。对于 Design，其实不仅仅局限于 System Design，还有 Product design，UI design…当然，这些都只是技术能力的一部分而已。</p>\n<ul>\n<li>认真对待设计文档。<ul>\n<li>多写怎么解决，少写是什么。</li>\n<li>重点描述不确定性最大的部分，实现细节不需要写。</li>\n</ul>\n</li>\n<li>认真思考项目的两个方向。<ul>\n<li>可用性(Usability)</li>\n<li>可扩展性(Scalability)</li>\n</ul>\n</li>\n<li>多尝试，多接触，多落地。</li>\n<li>多花时间认真地 code review。</li>\n<li>多谦虚向大佬请教学习，多问问为什么，多深挖原理。</li>\n</ul>\n<h1 id=\"非技术能力\"><a href=\"#非技术能力\" class=\"headerlink\" title=\"非技术能力\"></a>非技术能力</h1><p>非技术能力，也就是软技能。我觉得软技能这些，如果没有体会过或者没有经历过，或者没有前辈亲自教导你，是很难产生这些经验的。况且每个人的经历不一样，导致每个人的软技能点都不一样，差别还挺大。<strong>如果觉得和你的想法不符，请不要杠，这没意义。</strong></p>\n<ul>\n<li>有想法，有问题一定要及时和老板沟通，千万不要闭门造车，除非你是天才，闭关一天可以把整个组的工作都完美地搞定。</li>\n<li>异步工作模式，沟通先行。</li>\n<li>开会前要准备。<ul>\n<li>会议背景。</li>\n<li>会议内容。</li>\n<li>有哪些内容是一定要在会上和别人沟通清楚的，有哪些是可以线下再说的。</li>\n</ul>\n</li>\n<li>一切讨论、想法都要有记录。</li>\n<li>宁愿先花时间想清楚，千万别返工，<strong>返工是最耽误进度的</strong>。</li>\n<li>一定要和潜在的用户或者客户聊天。</li>\n<li>工作中要有主动性和上升意识。</li>\n<li>工作中不要将自己的角色定死，多尝试探索自己的边界。</li>\n<li>学会借助别人的力量，但要先学会提问的智慧。</li>\n<li>尝试着统筹全局，从宏观层面看待问题。</li>\n</ul>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><ul>\n<li>不要把自己局限于某一个位置，试着多尝试不同的东西，”管理”好自己，”管理”好身边的人。</li>\n<li>你的技术能力决定了你能多快去完成目标。而你的非技术能力决定了你在朝哪个方向努力。</li>\n</ul>\n<p>切身体会，”非技术能力”对人生的影响远远大于”技术能力”，”非技术能力”的上限也远高于”技术能力”。”非技术能力”是指数函数，”技术能力”是对数函数，但是”非技术能力”建立的前提和基础是做好”技术能力”。</p>\n<p>写完。瞬间又有了努力的动力。</p>\n<center>究竟还要经历多少荆棘</center>\n<center>也许该为我的选择庆幸</center>\n<center>你没做怎么知道没搞头</center>\n<center>你不要做了</center>\n<center>我劝你要脚踏实地的做人嘛</center>\n<center>这里有份洗厕所的工作你先做着</center>\n<center>你就别做梦了</center>\n<center>做人如果没梦想</center>\n<center>那跟咸鱼有什么分别啊</center>\n<center>你连鞋都没有</center>\n<center>那不就是咸鱼一条喽</center>\n<center>还学人家讲理想</center>\n<center>话不能这么讲</center>\n<center>我心中的一团火是不会熄的</center>\n<center>那把它吹熄了 不熄</center>\n<center>熄了可以再点着它</center>\n\n","categories":["人生"],"tags":["总结"]},{"title":"【随笔】2020年度总结","url":"http://lzyrapx.xyz/2021/01/02/【随笔】2020年度总结/","content":"<p>2020年，其实谁都不容易，但对于大部分人是灾难，对少部分人是机遇。对于我来说，确实是比较幸运的一年。</p>\n<p>一月爆发的新冠疫情直到今天还在持续，今年发生的事实在太多了。一月的一夜之间全国的口罩和板蓝根双黄连被抢购一空，互联网完全被负面疫情话题覆盖，全球感染人数猛增，前线防护用品严重紧缺，武汉封城，绝望的方舟医院，李文亮事件，非洲蝗灾，澳洲大火，科比飞机失事遇难，人生第一次 WFH，高考延期，蛋壳公寓全国暴雷，美国大选…但多灾多难的 2020 总算是过去了。</p>\n<p>最后，还是按惯例。写一下自己的个人年度总结，毕竟今年能记录和吐槽的事还是挺多，感慨颇多啊。</p>\n<p><img src=\"/images/beijing-night.jpeg\" alt=\"北京夜空\"><br>$$北京夜空$$</p>\n<h2 id=\"大公司\"><a href=\"#大公司\" class=\"headerlink\" title=\"大公司\"></a>大公司</h2><p>除了技术方向本身和技术积累底蕴之外，大企确实可以完虐绝大部分小公司，而且基础设施和文档也会做得相当好，这对个人成长确实是一个非常关键的因素。因为可以接触到各种各样技术大佬，高性价比的技术分享，健全的文档也会对具有学习主动性的人有很重要的作用。</p>\n<p>我可能是一个对环境很敏感的人，除了正在写代码的时间，真正做技术的时间之外，我还会思考环境对我的影响，以及我对环境的影响等，比如各种完全和我无关的汇报和会议就会慢慢耗尽了我的时间和情绪，特别是一些空谈架构，不思考细节的讨论会。但是这些躲也躲不过，逃也逃不掉，最后就只能躺平了或者跑路。</p>\n<p>总而言之，不论是在什么公司工作，工作始终是工作，正当年轻时，如果不能找一份有助于自己成长的工作，那就是对自己的不负责任。</p>\n<p>毕竟如果不是管理层，公司和普通员工只是单纯的租赁关系而已。先独善其身，再成就他人。</p>\n<p>退一步来说，<strong>要做就做核心，要做就做最好</strong>。</p>\n<h2 id=\"焦虑\"><a href=\"#焦虑\" class=\"headerlink\" title=\"焦虑\"></a>焦虑</h2><p>焦虑，每个人都有。主要是看为了什么而焦虑罢了。</p>\n<p>当然焦虑本身没有错，我会把焦虑分为三级，即良性焦虑 &gt; 恶性焦虑 &gt; 完全不思考。我很享受因为焦虑的情绪迫使我去思考更多问题，尽最大的努力，并最终获得更好的结果，这就是良性焦虑。但是如果每天的焦虑仍有很大一部分都是担忧不会遇到的或是无法解决的问题，这便是恶性焦虑。</p>\n<p>比如，当别人通过白嫖就可以获取更多的资源时，我兢兢业业，疯狂输出却一无所有时就会增加我的焦虑，甚至会产生自我怀疑，这是会不断循环的恶性发展。</p>\n<p>在一定程度上，和更优秀的人有品质的人一起共事，可能会减少我的焦虑，同时，更多地去信任别人的能力，也会减少焦虑。但本质上，我觉得还是少思考这方面的，多做点有趣有成长无焦虑的事。</p>\n<p>但在 2020 年，我对自己的各方面成长还是比较满意的，希望 2021 年能够减少更多无意义的恶性焦虑，对自己有更清晰的认知。</p>\n<h2 id=\"工作\"><a href=\"#工作\" class=\"headerlink\" title=\"工作\"></a>工作</h2><p>今年在工作方面，感觉自己的变化太大了，不仅仅是对当前工作的认知，还是对未来职业规划的思考。</p>\n<p>最后，跳槽了。</p>\n<p>本来是想六月就跳槽了，最后强行拖了两个多月。</p>\n<p>我个人觉得是一次非常成功的跳槽。</p>\n<p>挺刺激的。因为原本是想着创业的，但新工作的各方面实在是太好了…</p>\n<p>除了自己的本分工作之外，我希望自己在 2021 年一定要构建并运营起一个技术类社区。希望通过分享知识去认识更多的人，认识各行各领域的优秀朋友，也许可以间接地给我人生发展和职业上提供具有建设性的建议和反馈。</p>\n<p>另外，自己在工作中，一定要有意识地培养和提高自己的管理 team 的能力，多从宏观和微观的角度上去发现更多值得去学习的地方，为自己暗地里立下的目标打下基础，同时也要谦虚地多向大佬们学习，不懂就问。</p>\n<p>技术的发展是有限的。相信自己最终会走向管理和投资的道路上，做自己喜欢做的事，自由自在。</p>\n<h2 id=\"读书\"><a href=\"#读书\" class=\"headerlink\" title=\"读书\"></a>读书</h2><p>按照以前立过的 flag，每年看二十本书，但不能是强行凑够二十本，起码尽力去多读书就好。</p>\n<p>2020 年看的书几乎全部是在 Kindle 上读的。主要有这些书吧。</p>\n<ul>\n<li>《人类简史》</li>\n<li>《今日简史》</li>\n<li>《未来简史》</li>\n<li>《etcd技术内幕》</li>\n<li>《国富论》</li>\n<li>《大规模分布式存储系统》</li>\n<li>《分布式缓存》</li>\n<li>《微服务架构设计模式》</li>\n<li>《组织行为学》</li>\n<li>《管理学》</li>\n<li>《generatingfunctionology》</li>\n<li>《数论概论》</li>\n<li>《我已经够好了》</li>\n<li>《心灵游戏》</li>\n<li>《深度学习推荐系统》</li>\n<li>《人类愚蠢辞典》</li>\n<li>《杀死一只知更鸟》</li>\n<li>《思考，快与慢》</li>\n</ul>\n<p>读书笔记基本存在 macbook 的备忘录里没有分享出来，以后考虑一下写成 blog 的形式分享给更多的人吧。</p>\n<h2 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h2><p>经济问题对我来说已经不是什么问题了，就算是北京四环的房子大概也可以勉强给个首付，但不值得。买车可以，买房对现在的我来说还是一种压力，暂时不想陷入负债时期。</p>\n<p>除此之外，平时自己也几乎每天写写代码或者刷刷算法题，打打比赛，做了很多比较有意思的个人项目，但基本都被设置成 private repo 了。<br>我的 github contributions calendar 几乎是满的。 </p>\n<p><img src=\"/images/github-contributions.png\" alt=\"github-contributions\"></p>\n<p>另外，自己的单板滑雪水平有了质的提升，可能是双板转单板的原因，也可能是有单板大佬指导的因素，但大概率是 “Practice More” 的原因吧。几乎每周都会去雪场虐待自己。</p>\n<p>心疼自己三秒。</p>\n<p><strong>“有时候有些男孩子摔着摔着就变成猛男”。</strong></p>\n<p>吉他水平也还行。也就只会指弹几个曲子，唱几首歌了。</p>\n<h2 id=\"未来发展\"><a href=\"#未来发展\" class=\"headerlink\" title=\"未来发展\"></a>未来发展</h2><p>刚到 25 岁了。</p>\n<p><strong>“做事的初心很重要，这决定你能走多远。”</strong></p>\n<p>不能过于沉醉过去的荣光，因为过去的最好大概率就是现在的最差。</p>\n<p>我对自己还是很有信心的，还是相信自己以后会管理一个庞大的团队，所以自己得有意无意在学习和培养自己的管理和业务能力。</p>\n<p>还有很多有趣的想法等着我去做，这些都留给时间来给我答案吧。</p>\n<p>无论是投资，学习还是做事，我都会选择做一个长期主义者。</p>\n<p><strong>搞事情在还没做成功前，不要到处宣扬。这是我的性格和原则。</strong>（其实是害怕会失败）</p>\n<p>深谙交友无数的同时也会树敌不少的道理。</p>\n<p>所以就暂时不写太多了。</p>\n<p>相信 2021 年会更好。Carpe Diem。</p>\n<h2 id=\"2021-新目标\"><a href=\"#2021-新目标\" class=\"headerlink\" title=\"2021 新目标\"></a>2021 新目标</h2><h3 id=\"主\"><a href=\"#主\" class=\"headerlink\" title=\"主\"></a>主</h3><ul>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> AK Project-Euler。</li>\n<li><input disabled=\"\" type=\"checkbox\"> 继续阅读二十本书。</li>\n<li><input disabled=\"\" type=\"checkbox\"> 构建并运营起一个技术社区和公众号。</li>\n<li><input disabled=\"\" type=\"checkbox\"> 主副业税前收入达到七位数。</li>\n</ul>\n<h3 id=\"次\"><a href=\"#次\" class=\"headerlink\" title=\"次\"></a>次</h3><ul>\n<li><input disabled=\"\" type=\"checkbox\"> 坚持健身。</li>\n<li><input disabled=\"\" type=\"checkbox\"> 早睡早起，少熬夜。</li>\n<li><input disabled=\"\" type=\"checkbox\"> 运营 B 站和抖音账号。</li>\n<li><input disabled=\"\" type=\"checkbox\"> 练好吉他。</li>\n</ul>\n<h2 id=\"重新出发\"><a href=\"#重新出发\" class=\"headerlink\" title=\"重新出发\"></a>重新出发</h2><p><img src=\"/images/flight.jpeg\" alt=\"flight\"></p>\n","categories":["人生"],"tags":["随笔"]},{"title":"【总结】How to Prepare for a Google Engineering Interview","url":"http://lzyrapx.xyz/2020/12/20/【总结】How-to-Prepare-for-a-Google-Engineering-Interview/","content":"<blockquote>\n<p>这是之前 Google HR 为了可以让我好好准备面试而给我的一份资料。现在分享出来。</p>\n</blockquote>\n<p>Google interviews focus very heavily on <strong><em>algorithms and data structures</em></strong>. Please study more complex and advance Algorithms and Data Structure and also you’ll be expected to know and apply: <strong><em>lists, maps, stacks, priority queues, binary trees, graphs, bags, and sets.</em></strong> You’ll need to talk about how they’re implemented and why you’d choose one implementation or data structure instead of another.</p>\n<p><strong><em>For algorithms</em></strong> you’ll want to know <strong><em>greedy algorithms, divide and conquer, dynamic programming, recursion, and brute force search</em></strong>. You’ll definitely want to be conversant with <strong><em>big­O notation, time­space complexity, and real world performance of all of this</em></strong>. Most importantly you’ll need to be able to <strong><em>pick the right data structure and algorithm for a specific problem</em></strong>.</p>\n<p>Practice your coding in a google doc without a compiler as opposed to a plain text editor to avoid any confusion throughout the interview.</p>\n<p>You can utilise a platform called “Pramp <a href=\"https://pramp.com/#/\" target=\"_blank\" rel=\"noopener\">https://pramp.com/#/</a>“ which enables candidates to practice mock interviews with each other online. Note that the difficulty of the problems will vary but it is a good method for “warming up!”</p>\n<h2 id=\"Preparation\"><a href=\"#Preparation\" class=\"headerlink\" title=\"Preparation:\"></a>Preparation:</h2><p>Start with <a href=\"http://steve-yegge.blogspot.com/2008/03/get-that-job-at-google.html\" target=\"_blank\" rel=\"noopener\">Steve Yegge’s Blog</a>.</p>\n<p>Google interviews focus very heavily on algorithms and data structures. You’ll be expected to know and apply: lists, maps, stacks, priority queues, binary trees, graphs, bags, and sets. You’ll need to to talk about <strong><em>how they’re implemented and why you’d choose one implementation or data structure instead of another</em></strong>. For algorithms you’ll want to know greedy algorithms, divide and conquer, dynamic programming, recursion, and brute force search. You’ll definitely want to be conversant with big­O notation, time­space complexity, and real world performance of all of this. Most importantly you’ll need to be able to pick the right data structure and algorithm for a specific problem.</p>\n<p>Suggestions on reading material include:</p>\n<ul>\n<li>Algorithm / Data Structure Theory books</li>\n<li>Google Style Guides (<a href=\"https://google.github.io/styleguide/cppguide.html\" target=\"_blank\" rel=\"noopener\">C++</a>, <a href=\"https://google.github.io/styleguide/pyguide.html\" target=\"_blank\" rel=\"noopener\">Python</a>, <a href=\"https://google.github.io/styleguide/javaguide.html\" target=\"_blank\" rel=\"noopener\">Java</a>; <a href=\"https://source.android.com/devices/architecture/hidl/code-style?hl=zh-cn\" target=\"_blank\" rel=\"noopener\">Android</a>, <a href=\"https://google.github.io/styleguide/javascriptguide.xml\" target=\"_blank\" rel=\"noopener\">Javascript</a>)</li>\n<li><a href=\"https://www.coursera.org/learn/algorithms-part1\" target=\"_blank\" rel=\"noopener\">Coursera - Algorithms, Part 1</a></li>\n<li><a href=\"https://www.coursera.org/learn/algorithms-part2\" target=\"_blank\" rel=\"noopener\">Coursera - Algorithms, Part 2</a></li>\n<li><a href=\"https://www.udacity.com/course/intro-to-algorithms--cs215\" target=\"_blank\" rel=\"noopener\">Udacity - Intro to Algorithms</a></li>\n<li><a href=\"https://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-006-introduction-to-algorithms-spring-2008/\" target=\"_blank\" rel=\"noopener\">MIT Open courseware - Introduction to Algorithms</a></li>\n</ul>\n<h2 id=\"Moving-onto-the-practice-after-theory\"><a href=\"#Moving-onto-the-practice-after-theory\" class=\"headerlink\" title=\"Moving onto the practice after theory:\"></a>Moving onto the practice after theory:</h2><p>When you practice, do not use an IDE. You need to be able to write legible, compilable code without help with regards to layout, or spelling of standard library class/method names. I suggest solving similar style algorithmic/ DS problems on a google document or on paper to simulate a real interview. I would recommend using a whiteboard to practice, if you can do it on a whiteboard, you can do it on anything.</p>\n<p>Several sites that provide similar problems to those typically asked in the interview are:</p>\n<ul>\n<li><a href=\"https://www.hackerrank.com/\" target=\"_blank\" rel=\"noopener\">HackerRank</a></li>\n<li><a href=\"https://community.topcoder.com/tc?module=MatchDetails&rd=15712\" target=\"_blank\" rel=\"noopener\">Topcoder</a></li>\n<li><a href=\"https://projecteuler.net/archives\" target=\"_blank\" rel=\"noopener\">Project-Euler</a></li>\n<li><a href=\"https://codeforces.com/contests\" target=\"_blank\" rel=\"noopener\">Codeforces</a></li>\n<li><a href=\"https://leetcode.com/\" target=\"_blank\" rel=\"noopener\">Leetcode</a></li>\n<li><a href=\"https://www.interviewbit.com/\" target=\"_blank\" rel=\"noopener\">InterviewBit</a></li>\n<li><a href=\"https://open.kattis.com/\" target=\"_blank\" rel=\"noopener\">Kattis</a></li>\n<li>Problems from <a href=\"https://books.google.co.uk/books/about/Cracking_the_Coding_Interview.html?id=anhAXwAACAAJ&hl=en\" target=\"_blank\" rel=\"noopener\">Cracking the Coding Interview Book</a></li>\n</ul>\n<p>This will help get you into the problem-solving mindset.</p>\n<p>Here are a couple of extra videos which are definitely worth watching before your interview:</p>\n<ul>\n<li>Example of a <a href=\"https://www.youtube.com/watch?v=XKu_SEDAykw&feature=em-subs_digest\" target=\"_blank\" rel=\"noopener\">Coding Interview</a></li>\n<li>How to best prepare for a technical interview: <a href=\"https://www.youtube.com/watch?v=ko-KkSmp-Lk\" target=\"_blank\" rel=\"noopener\">Preparation</a></li>\n</ul>\n<h3 id=\"以上为-HR-提供的部分资料。\"><a href=\"#以上为-HR-提供的部分资料。\" class=\"headerlink\" title=\"以上为 HR 提供的部分资料。\"></a>以上为 HR 提供的部分资料。</h3><h2 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h2><p>Google 整体面试流程上基本如下:</p>\n<ul>\n<li>Recruiter Prescreen</li>\n<li>Phone Interview (1~2 sessions)</li>\n<li>Onsite Interview (4~5 sessions, 1 week to receive feedback)</li>\n<li>Hiring Committee Review</li>\n<li>Offer Review</li>\n<li>Offer Delivery (Yippee!)</li>\n</ul>\n<h4 id=\"基本是-1-轮电话面试-5-轮-onsite-onsite-难度比-online-要高，要在-google-doc-或白板上写代码，基本是-Algorithm-System-Design-和-OO-Design\"><a href=\"#基本是-1-轮电话面试-5-轮-onsite-onsite-难度比-online-要高，要在-google-doc-或白板上写代码，基本是-Algorithm-System-Design-和-OO-Design\" class=\"headerlink\" title=\"基本是 1 轮电话面试, 5 轮 onsite, onsite 难度比 online 要高，要在 google doc 或白板上写代码，基本是 Algorithm, System Design 和 OO Design.\"></a>基本是 1 轮电话面试, 5 轮 onsite, onsite 难度比 online 要高，要在 google doc 或白板上写代码，基本是 Algorithm, System Design 和 OO Design.</h4><h2 id=\"如何获取面试机会？\"><a href=\"#如何获取面试机会？\" class=\"headerlink\" title=\"如何获取面试机会？\"></a>如何获取面试机会？</h2><ul>\n<li>参加 <a href=\"https://codingcompetitions.withgoogle.com/codejam/schedule\" target=\"_blank\" rel=\"noopener\">Google Code Jam</a>, 并成为 top xx.</li>\n<li>参加 <a href=\"https://codingcompetitions.withgoogle.com/kickstart/schedule\" target=\"_blank\" rel=\"noopener\">Google Kickstart</a>, 并成为 top xx.</li>\n<li>内推.</li>\n</ul>\n<h3 id=\"以上难度逐级递减。\"><a href=\"#以上难度逐级递减。\" class=\"headerlink\" title=\"以上难度逐级递减。\"></a>以上难度逐级递减。</h3>","categories":["人生"],"tags":["总结"]},{"title":"【工程】分布式任务调度 SchedulerX","url":"http://lzyrapx.xyz/2020/10/29/【工程】分布式任务调度SchedulerX/","content":"<h2 id=\"SchedulerX\"><a href=\"#SchedulerX\" class=\"headerlink\" title=\"SchedulerX\"></a>SchedulerX</h2><p>SchedulerX 是阿里中间件自研的基于 Akka 架构（Akka in Schedulerx2.0）的新一代分布式任务调度平台，提供定时、任务编排、分布式跑批等功能，具有高可靠、海量任务、秒级调度、可运维等能力。<br>SchedulerX 2.0 开始于 2018-01-22，没有参考 DTS 和 SchedulerX，是全新自研的下一代任务调度平台，不但兼容老版本编程模型，还提供更多更快更强的能力。</p>\n<ul>\n<li>更多：支持多种时间表达式，任务编排，支持更多的业务场景。单机群支持上千万任务，一天上十亿次调度，支持更多的任务数。</li>\n<li>更快：支持秒级别调度，处理准实时业务。</li>\n<li>更强：支持日志查询、原地重跑、重刷数据等多种操作，提供更强的运维能力和排错手段。</li>\n</ul>\n<h2 id=\"注意功能\"><a href=\"#注意功能\" class=\"headerlink\" title=\"注意功能\"></a>注意功能</h2><ul>\n<li>强大的定时调度器：Crontab，当然，必须支持 crontab 表达式</li>\n<li>Fixed rate：众所周知，crontab 必须被 60 整除，比如想每隔 40 分钟跑一次，cron 不支持。Fixed rate 专门用来做定期轮询，表达式简单。</li>\n<li>Fixed delay：适合做轮询的业务，比如每次执行完成隔 10 秒再跑，那么 fixed delay 非常适合你。</li>\n<li>日历：支持多种日历，还可以自定义导入日历。比如金融业务需要在每个交易日执行。</li>\n<li>时区：跨国的业务，需要在每个国家的时区定时执行某个任务。</li>\n<li>任务编排：schedulerx 2.0 支持工作流（DAG）进行任务编排，操作简单，前端直接单手操作拖拖拽拽即可。详细的任务状态图能一目了然看到下游任务为什么没跑，如下图：</li>\n</ul>\n<p><img src=\"/images/workflow.png\" alt=\"workflow\"></p>\n<ul>\n<li>任务类型：支持多种任务类型，可以无限扩展！<ul>\n<li>java：可以跑在用户进程中，也可以上传jar包动态加载。</li>\n<li>shell：前端直接写 shell 脚本。</li>\n<li>python：前端直接写 python 脚本，需要机器有 python 环境。</li>\n<li>go：前端直接写 go 脚本，需要机器有go环境。</li>\n<li>自定义：用户甚至可以自定义任务类型，然后实现一个 plugin 就行。</li>\n</ul>\n</li>\n<li>执行方式&amp;分布式编程模型<ul>\n<li>单机：随机挑选一台机器执行。</li>\n<li>广播：所有机器同时执行且等待全部结束</li>\n<li>并行计算：map/mapreduce模型，1~300个子任务，有子任务列表。</li>\n<li>内存网格：map/mapreduce模型，10W以下子任务，无子任务列表，基于内存计算，比网格计算快。</li>\n<li>网格计算：map/mapreduce模型，100W以下子任务，无子任务列表，基于文件H2计算。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"系统架构\"><a href=\"#系统架构\" class=\"headerlink\" title=\"系统架构\"></a>系统架构</h2><p><img src=\"/images/schedulerx.png\" alt=\"schedulerx\"></p>\n<p>可扩展的执行引擎：<br><img src=\"/images/schedulex-processor.png\" alt=\"schedulex-processor\"></p>\n<ul>\n<li>TaskMaster：类似于 yarn 的 AppMaster，支持可扩展的分布式执行框架，进行整个 jobInstance 的生命周期管理、container 的资源管理，同时还有 failover 等能力。默认实现 StandaloneTaskMaster（单机执行），BroadcastTaskMaster（广播执行），MapTaskMaster（并行计算、内存网格、网格计算），MapReduceTaskMaster（并行计算、内存网格、网格计算）。</li>\n<li>Container：执行业务逻辑的容器框架，支持线程/进程/docker/actor等。</li>\n<li>Processor：业务逻辑框架，不同的 processor 表示不同的任务类型。</li>\n</ul>\n","categories":["人生"],"tags":["工程"]},{"title":"【论文阅读】Making a Completely Blind Image Quality Analyzer","url":"http://lzyrapx.xyz/2020/10/28/【论文阅读】Making-a-Completely-Blind-Image-Quality-Analyzer/","content":"<h2 id=\"链接：\"><a href=\"#链接：\" class=\"headerlink\" title=\"链接：\"></a>链接：</h2><p><a href=\"https://live.ece.utexas.edu/publications/2013/mittal2013.pdf\" target=\"_blank\" rel=\"noopener\">论文链接</a></p>\n<h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><p>论文介绍了一种新的无参考图像质量指标模型，这个新的模型称为 NIQE(Natural Image Quality Evaluator)。<br>这个模型的设计思路是基于构建一系列的用于衡量图像质量的特征，并且将这些特征用于拟合一个多元的高斯模型。这些特征是从一些简单并且高度规则的自然景观中提取的。另外，模型实际上是衡量一张待测图像在多元分布上的差异，这个分布则是由一系列的正常的自然图像中提取的这些特征所构建的。</p>\n<h2 id=\"构建模型\"><a href=\"#构建模型\" class=\"headerlink\" title=\"构建模型\"></a>构建模型</h2><ul>\n<li><p>空间域上的特征，称之为 Spatial Domain NSS。</p>\n<p>它按照如下的方式进行计算，首先是提取图像中的一个个 patch，然后做下面这样的一个归一化。<br>$$\\hat{I}(i, j)=\\frac{I(i, j)-\\mu(i, j)}{\\sigma(i, j)+1}$$</p>\n<p>其中各项如下所示：<br>$$\\mu(i, j)=\\sum_{k=-K}^{K} \\sum_{l=-L}^{L} w_{k, l} I(i+k, j+l)$$<br>$$\\sigma(i, j)=\\sqrt{\\sum_{k=-K}^{K} \\sum_{l=-L}^{L} w_{k, l}[I(i+k, j+l)-\\mu(i, j)]^{2}}$$</p>\n<p>这里的 $\\mu$ 就是高斯权重。在最初的设计中，这里的高斯权重是一个 3x3 的模板。<br>看到上面的公式，这里就很明确了。<br>上述实际上是一个基于高斯平均值以及高斯标准差的归一化计算，相对于其他的一些指标，NIQE 仅仅是计算正常的自然图像中的这个指标，因此不正常的图像多多少少会在这个指标上同正常图像的计算值会有一个歧离，从这个意义上讲，理论上 NSS 可以适用于各种图像退化种类，基于这种思想设计的 IQA 可以权衡各种图像退化，而不是像某些指标那样仅仅是在某些退化种类上有很好的的表现。</p>\n</li>\n<li><p>patch 的选择<br>如果需要计算上述的 NSS 指标，毫无疑问的是会造成图像被分裂为一个一个的 patch，在 NIQE 的算法设计中，只有一部分 patch 是有用的，这就涉及到一个 patch 的选择问题；这里实际上有一个启发，比如我们关注一个分辨率退化图像时，我们会挑选那些原本应该是 sharp 的局部边缘进行观察，判断其分辨率是否受损，而不会整个图像的所有 patch 都观察一遍。<br>这里定义了一种局部形变系数：<br>$$\\delta(b)=\\sum \\sum_{(i, j) \\in \\text {patch} b} \\sigma(i, j)$$<br>这里的形变系数设置了一个阈值，在论文作者的实验中，这个阈值设置的是 0.75，大于 0.75 的 patch 可以选入进行下一步计算；这一步的操作是很好理解的，因为毕竟往往是形变系数越大的 patch 说明里面的内容越复杂，其实就是说明这里的内容所包含的信息更多。这里的 $\\sigma$ 就是上面步骤所述的 $\\sigma$ 计算。</p>\n</li>\n<li><p>描述 patch<br>上面的内容已经说明了 patch 的空间域特征以及如何选择 patch，现在的问题在于如何设计指标来刻画我们选择的 patch，这种刻画按照设计是一种借鉴高斯分布思想的指标。<br>首先定义高斯分布类型的指标 GGD：<br>$$f(x ; \\alpha, \\beta)=\\frac{\\alpha}{2 \\beta \\Gamma(1 / \\alpha)} \\exp \\left(-\\left(\\frac{|x|}{\\beta}\\right)^{\\alpha}\\right)$$<br>这里的 $\\Gamma$ 是一个 gamma 函数:<br>$$\\Gamma(a)=\\int_{0}^{\\infty} t^{a-1} e^{-t} d t \\quad a&gt;0$$<br>根据论文的说法，这里的 $\\alpha$ 和 $\\beta$ 是可以通过论文[1]的计算方式获得。NIQE 指标设计本身在这一步很大程度上借鉴了参考论文的计算。<br>最终定义并计算了如下的特征：</p>\n<p>对于 $\\forall x \\leq 0$,<br>$$f\\left(x ; \\gamma, \\beta_{l}, \\beta_{r}\\right)= \\frac{\\gamma}{\\left(\\beta_{l}+\\beta_{r}\\right) \\Gamma\\left(\\frac{1}{\\gamma}\\right)} \\exp \\left(-\\left(\\frac{-x}{\\beta_{l}}\\right)^{\\gamma}\\right)$$</p>\n<p>对于 $\\forall x \\geq 0$,<br>$$f\\left(x ; \\gamma, \\beta_{l}, \\beta_{r}\\right)= \\frac{\\gamma}{\\left(\\beta_{l}+\\beta_{r}\\right) \\Gamma\\left(\\frac{1}{\\gamma}\\right)} \\exp \\left(-\\left(\\frac{x}{\\beta_{r}}\\right)^{\\gamma}\\right)$$</p>\n<p>$$\\eta=\\left(\\beta_{r}-\\beta_{l}\\right) \\frac{\\Gamma(2 / r)}{\\Gamma(1 / r)}$$</p>\n<p>最后，patch 的值就可以经过上述的公式计算出的指标来。</p>\n</li>\n<li><p>标准的指标获得<br>根据上面描述的总体思路，该算法在于从大量自然图像中计算出合理的指标来，然后再计算退化图像相对于这个指标的”距离”。那么就可以分为两步。</p>\n<ul>\n<li>第一步计算出这个指标来。</li>\n<li>第二步如何来衡量这个“距离”。<br>首先第一步，从上面可以看出借助于高斯行分布的特征设计具有一定的合理性（当然这里的合理性估计是由参考文献给出的），在这里我就可以定义出一组高斯型分布的密度函数：<br>$$f_{X}\\left(x 1, x 2, \\ldots x_{k}\\right)=\\frac{1}{(2 \\pi)^{k / 2}\\left|\\sum\\right|^{1 / 2}} \\exp \\left(-\\frac{1}{2}(x-v)^{T} \\sum^{-1}(x-v)\\right)$$</li>\n</ul>\n<p>为什么定义这样的一种分布？因为论文作者认为自然正常图像的特征就应该以高斯分布类型存在。<br>这里的就是上面所述的 $\\eta$ 计算值，$\\upsilon$ 和 $\\sum$ 就是上述高斯分布的均值和协方差矩阵。作者通过定义了这样的分布，然后在标准的自然正常图像上进行计算，可以刻画出这样的一个正常图像所代表的分布，并且可以根据这些自然图像的分布数据，可以估计出上述的 $\\upsilon$ 以及 $\\sum$ 这个过程就像一般高斯分布中估计出均值和方差一样。到这里就可以得到正常图像的刻画指标。<br>除此之外，论文还定义了不正常图像与正常图像指标间的”距离”：<br>$$\\left.D\\left(\\nu_{1}, \\nu_{2}, \\Sigma_{1}, \\Sigma_{2}\\right)=\\sqrt{\\left(\\left(\\nu_{1}-\\nu_{2}\\right)^{T}\\left(\\frac{\\Sigma_{1}+\\Sigma_{2}}{2}\\right)^{-1}\\left(\\nu_{1}-\\nu_{2}\\right)\\right.}\\right)$$<br>其中 $\\nu_{1}$ 和 $\\nu_{2}$ 分别代表退化图像和正常图像的均值向量(mean vectors), $\\Sigma_{1}$ 和 $\\Sigma_{2}$ 分别代表退化图像和正常图像的协方差矩阵(covariance matrices)。</p>\n</li>\n</ul>\n<h2 id=\"个人想法\"><a href=\"#个人想法\" class=\"headerlink\" title=\"个人想法\"></a>个人想法</h2><ul>\n<li>论文利用高斯分布来处理这些特征，有一个基本前提是，假设这里所涉及的特征在真实的图像中所反映的也是服从高斯分布的，但关于这一点这里没有证明而是假定这是一个事实。严格上来说，不严谨但不能说没有使用价值。</li>\n<li>论文仅仅采用空间域的特征，可能在某些场合并不十分合适，比如严格按照 patch 的分割方式获得一系列 patch，如果将不同的 patch 在空间上的位置进行对调，这样每一个 patch 都还能符合该算法的要求，但是很显然那其实可以是一个马赛克状的退化图像。</li>\n<li>该方法显然不能很好地像 SSIM 那样可以方便地拓展到图像局部的判断，它这里只是一个全局的判断。</li>\n</ul>\n<h2 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h2><p>[1] K. Sharifi and A. Leon-Garcia, “Estimation of shape parameter for generalized Gaussian distributions in subband decompositions of video,” IEEE Trans. Circ. Syst. Video Technol., vol. 5, no. 1, pp. 52–56, 1995.</p>\n","categories":["学习"],"tags":["论文阅读"]},{"title":"【工程】泳道","url":"http://lzyrapx.xyz/2020/10/14/【工程】泳道/","content":"<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>微服务框架下服务个数多、调用链路较长，其中一个服务出问题会影响到整条链路。但 QA 提测往往需要该条链路上的多个服务配套测试，甚至是同时测试一个服务的多个演进版本。</p>\n<p>提供稳定环境 和 多服务/多版本同时测试 看似相悖的需求，但可以通过泳道(swimlane)能够得到解决。</p>\n<p>测试过程中会遇到的问题:</p>\n<ul>\n<li>关于一个服务上的多个需求的同时测试，存在服务抢占分支测试的问题。</li>\n<li>不同的业务组在测试时依赖的第三方服务有改动或正在进行新需求测试影响本业务测试。</li>\n</ul>\n<h2 id=\"什么是泳道\"><a href=\"#什么是泳道\" class=\"headerlink\" title=\"什么是泳道\"></a>什么是泳道</h2><p>对服务链按需求进行分组复制，并实现逻辑、物理的隔离，使得不同需求的服务链运行在相隔的物理机器上，逻辑上如同游泳场中的泳道。</p>\n<p><img src=\"/images/swimlane.png\" alt=\"泳道\"></p>\n<p>一个环境内会有一条骨干链路(该环境的默认链路)和多条泳道。</p>\n<p>如图所示，泳道隔离出了一条调用边界：处于[泳道-1]内的服务B要调用服务C，若在[泳道-1]内部署了C服务，则B只能调用泳道内的C服务，而不能调用骨干链路或其他泳道的C服务；若在[泳道-1]内没有部署C服务，则流量会调回骨干链路。</p>\n<p>优势：</p>\n<ol>\n<li>并行测试。（因此可以根据测试需要，部署不同分支的服务分组，多个泳道并行，多个服务/多个版本可同时提测）</li>\n<li>提供稳定的骨干链路。（保证整个测试流程始终能正常运行）</li>\n<li>错误隔离。（泳道内的服务发生异常 不会影响其他泳道）</li>\n</ol>\n<h2 id=\"泳道的特性\"><a href=\"#泳道的特性\" class=\"headerlink\" title=\"泳道的特性\"></a>泳道的特性</h2><p>泳道相当于提供了多条“请求的跑道”，理解泳道主要在于理解“流量跑到哪去了”:</p>\n<ol>\n<li><p>泳道内如果没有部署被调用服务，流量会 fallback 到骨干。</p>\n<ul>\n<li>比如上图[泳道-2]中的 B 服务节点 调用了 [骨干链路]中的 C 服务节点。</li>\n</ul>\n</li>\n<li><p>泳道内若存在被调用节点，那么流量是一定不会 fallback 的 (包括不可用的和禁用的)</p>\n<ul>\n<li>比如上图[泳道-2]中的A服务节点 只会调用 [泳道-2]中的 B 服务节点，即使[泳道-2]中的B不可用，也是不会 fallback 的。</li>\n</ul>\n</li>\n<li><p>骨干环境是一定不会调用到泳道内的。</p>\n<ul>\n<li>比如上图中绝逼不会有 从[骨干链路]到[泳道-2]的调用。</li>\n</ul>\n</li>\n<li><p>泳道之间是一定不会互相调用的。</p>\n<ul>\n<li>比如上图中绝逼不会有 [泳道-1]与[泳道-2]之间的调用。</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"泳道的实现\"><a href=\"#泳道的实现\" class=\"headerlink\" title=\"泳道的实现\"></a>泳道的实现</h2><p>泳道实现的重点在于服务的注册、发现和服务导流。</p>\n<p>后端服务的注册和发现的流程如下：</p>\n<ol>\n<li>服务B启动，上报 ip、port、appkey、swimlane 等信息。</li>\n<li>骨干链路上的服务 A 节点要调用 B，先去取B的服务列表，并进行过滤：A 不带有泳道标识，所以只会调用不带泳道标识的B服务节点。</li>\n<li>泳道1上的服务 A 节点要调用 B，也会先去取B的服务列表，并进行过滤：A 带有泳道=泳道1 标识，所以只会调用同样带有泳道=泳道1 标识的 B 服务节点。</li>\n</ol>\n<p>关于服务导流：</p>\n<ul>\n<li>通过域名划分泳道：为各个泳道申请单独的域名，根据域名进行分流。</li>\n<li>通过 header 携带泳道信息：请求的 header 字段增加“swimlane=xxxx”，标识请求要打到名为 xxxx 的泳道里，分流系统会根据该字段做分流。</li>\n</ul>\n<p>前端静态资源，基于泳道名进行隔离，在资源编译和打包的时候，指定发布的泳道名，然后资源会上传到该泳道对应的静态服务器中：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">const swimName &#x3D; process.env.SWIM_ENV;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">if (swimName) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">    console.log(&#39;检测到泳道环境SWIM_ENV:&#39; + swimName);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">    console.log(&#39;默认使用test01执行发布&#39;);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">const webpackConfig &#x3D; merge(baseWebpackConfig, &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">    devtool: config.build.productionSourceMap ? &#39;#source-map&#39; : false,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">    output: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">        path: swimName ? config.build.assetsRoot + &#96;&#x2F;$&#123;swimName&#125;&#96; : config.build.assetsRoot,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">        publicPath: swimName ? config.build.assetsPublicPath + &#96;&#x2F;$&#123;swimName&#125;&#x2F;&#96; : config.build.assetsPublicPath,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\">        filename: &#39;js&#x2F;[name].bundle.[chunkhash].js&#39;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\">        chunkFilename: &#39;js&#x2F;[name].[chunkhash:5].chunk.js&#39;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\">        library: &#39;[name]&#39;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;);</span></pre></td></tr></table></figure>","categories":["人生"],"tags":["工程"]},{"title":"【随笔】为什么从 T 司离职","url":"http://lzyrapx.xyz/2020/09/26/【随笔】为什么从 T 司离职/","content":"<h1 id=\"近况\"><a href=\"#近况\" class=\"headerlink\" title=\"近况\"></a>近况</h1><p>最近终于从 T 司离职了，原本和 HR 沟通过是要提前一个月提离职的，因此我是九月提的离职申请，打算十月份正式离职。但 T 司某领导看到我也没啥心思干活了，就说好可以让我早点走了。我也是超级开心的，毕竟我也是不想浪费更多时间，而且当时我手上已经有了几个大厂和一些创业公司的offer。因此也就无所谓了。然后，自己就顺利地和家人和朋友们愉快地进行了一次已经计划好的全国旅游。舒服，舒服到不想继续上班。</p>\n<h1 id=\"离职原因\"><a href=\"#离职原因\" class=\"headerlink\" title=\"离职原因\"></a>离职原因</h1><p>马云也说过。员工的离职原因林林总总，但其实无非归结为两种原因：</p>\n<p><strong>1. 心委屈了，干得不爽。</strong></p>\n<p><strong>2. 钱没给到位。</strong></p>\n<p>这两点都其实是原因之一吧。</p>\n<p>关于第一点，从今年转进一个新的组里后遇到的事真的太委屈了，听到的事也差点改变三观，逐渐对这个部门，甚至对自己产生了深深的怀疑。其实六月份就想离职了…这里就不多说了。不喜欢评价任何事和任何人。而且自己并不是消极沟通，只是很多次沟通无果且无用后就完全放弃了。</p>\n<p>关于第二点，有公司最高给我涨了60%，这 60% 仅仅是 base，不是 package，算上 package 应该更高。因此确实想跳槽，去哪里打工不是打工呢，又不是自己的事业。</p>\n<p>除了以上这两点。还有我觉得<strong>最重要的两点</strong>。</p>\n<p><strong>3. 个人发展已经非常有限了。</strong></p>\n<p><strong>4. 可以真正探讨技术和尊重我想法的 H 哥离职了。</strong></p>\n<p>也有自己的问题吧，反正觉得自己不适合呆在这样的团队里。</p>\n<h1 id=\"不舍\"><a href=\"#不舍\" class=\"headerlink\" title=\"不舍\"></a>不舍</h1><p>不舍嘛。确实是有。Bai 哥，Tao 哥，Liang 哥，Wei 哥，Jin 姐，还有 wl 等，ta 们都是我不舍的人啊。</p>\n<p>但只能祝好了。唉。</p>\n<p>希望 ta 们可以越来越好，未来有一天都能独当一面。</p>\n<h1 id=\"后序\"><a href=\"#后序\" class=\"headerlink\" title=\"后序\"></a>后序</h1><p>虽然离职了，但听说 T 司某 Z 领导居然在消费我的剩余价值…</p>\n<p>确实是挺寒心的。</p>\n<p>还亏我离职后还内推了几个非常不错的候选人进去，都有面到终面了…</p>\n<p>在知道我离职后，某 Z 领导还拿我给大家立威后，瞬间觉得整个人不好了…</p>\n<p>瞬间不想继续推简历给 I 部门了…</p>\n<p>去过三家公司，就 T 司这样…</p>\n<p>但也就这样吧。碍于还有很多可爱的人和好朋友都在 I 部门，就不想搞 I 部门了。</p>\n<p>好聚好散。</p>\n","categories":["人生"],"tags":["随笔"]},{"title":"【总结】How to be a good Tech Lead","url":"http://lzyrapx.xyz/2020/03/19/【总结】How-to-be-a-good-Tech-Lead/","content":"<h1 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h1><p>我平时除了工作和娱乐，还会花大量时间去思考和总结一些事情。比如，<strong>作为一个 Tech Lead，在一个新项目开始时，你需要知道什么和需要做什么事呢？</strong>如果你可以<strong>把规则处理好</strong>，<strong>把人管理好</strong>，<strong>个人见多识广，学识渊博，经验足，阅历厚</strong>，那肯定意味着你可能就是一个优秀的 Tech Lead。</p>\n<h2 id=\"如何处理一个新项目\"><a href=\"#如何处理一个新项目\" class=\"headerlink\" title=\"如何处理一个新项目\"></a>如何处理一个新项目</h2><ol>\n<li>基础设施<ul>\n<li>生产环境是什么？</li>\n<li>开发环境是什么？</li>\n<li>怎么上线？</li>\n<li>负载均衡怎么做？</li>\n<li>需要防火墙吗？</li>\n<li>需要证书吗？</li>\n<li>内网使用还是外网使用？</li>\n<li>CICD怎么做？</li>\n<li>怎么处理复杂模型的上线？</li>\n</ul>\n</li>\n<li>第三方<ul>\n<li>集成？</li>\n<li>如果各个集成环境间是超出能控制的混乱状态，怎么保障各个集成环境是组织良好有序、顺畅、自动化、边界规划合理的？</li>\n</ul>\n</li>\n<li>找出有号召力的人<ul>\n<li>首先要具有责任心？</li>\n<li>再者需要准时而有分寸？</li>\n<li>最后可以说“No”的、能够砍预算、能够对任何人说“你干得很棒”的人？<ul>\n<li>架构师？</li>\n<li>项目管理？</li>\n<li>对数据保护有控制权的人？</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>找到任何关于团队的工作文档，阅读并理解它<ul>\n<li>部署文档？</li>\n<li>测试文档？</li>\n<li>用户使用文档？</li>\n<li>接口文档？</li>\n<li>架构文档？</li>\n<li>UML设计文档？</li>\n</ul>\n</li>\n<li>预算和价值定位<ul>\n<li>是否清楚和控制预算？</li>\n<li>为什么要做这个项目？</li>\n<li>怎么定义项目价值？</li>\n<li>怎么定义项目中各个模块的角色？</li>\n</ul>\n</li>\n<li>试着跟每个团队成员进行一对一的面谈<ul>\n<li>试着去了解成员各自的目标、特别是在这个项目中的目标，同时将自己的目标传达给他们？</li>\n<li>什么是他们的主要痛点和障碍？</li>\n<li>不懂也要多问?</li>\n</ul>\n</li>\n<li>和项目经理做朋友，并明白他们是怎样管理项目进度的<ul>\n<li>互相建立信任关系？</li>\n<li>不要尝试做一个财务细节上的专家，只要懂得财务的基础知识就可以了？</li>\n</ul>\n</li>\n<li>如果有多个团队，找到并结识其他团队的 Tech Lead<ul>\n<li>认识更多的人力资本肯定没坏事？</li>\n</ul>\n</li>\n<li>Backlog<ul>\n<li>确保边界清晰?</li>\n<li>是否需要使用 story trees 和 backlog hierarchies?</li>\n<li>需不需要从高处俯视正在建立的东西？</li>\n</ul>\n</li>\n<li>代码<ul>\n<li>确保有代码的读写权限？</li>\n<li>保持和代码的联系？</li>\n<li>定期找开发做一次介绍？</li>\n<li>需要对整个代码库和架构等有个完整的印象？</li>\n</ul>\n</li>\n<li>主要痛点和障碍<ul>\n<li>分析项目痛点和障碍？</li>\n<li>分析第三方痛点和障碍？</li>\n<li>分析其他痛点和障碍？比如财务预算？</li>\n</ul>\n</li>\n<li>作为 Tech Lead，这个项目中最害怕的事有哪些？<ul>\n<li>未知的事物都是最害怕的？</li>\n<li>存在一些比较大的风险？</li>\n</ul>\n</li>\n</ol>\n<blockquote>\n<p>以上仅适合于大型的企业项目中，小项目小团队在项目开始时很多都不会考虑这么清楚的。</p>\n</blockquote>\n<h2 id=\"如何提高专业水平\"><a href=\"#如何提高专业水平\" class=\"headerlink\" title=\"如何提高专业水平\"></a>如何提高专业水平</h2><ol>\n<li>多看相关书籍？</li>\n<li>多与经验丰富的人交流或者请教？</li>\n<li>多写总结？多写心得体会？</li>\n<li>做一些专业知识的 PPT，多和同事同学们分享？</li>\n<li>…</li>\n</ol>\n","categories":["人生"],"tags":["总结"]},{"title":"【算法】如何证明添加最少的边使得有向图强连通？","url":"http://lzyrapx.xyz/2020/02/23/【算法】如何证明添加最少的边使得有向图强连通？/","content":"<h1 id=\"Problem\"><a href=\"#Problem\" class=\"headerlink\" title=\"Problem\"></a>Problem</h1><p>给定一个有向图 $G$，问至少添加多少条有向边可以使得 $G$ 强连通。</p>\n<h1 id=\"Solution\"><a href=\"#Solution\" class=\"headerlink\" title=\"Solution\"></a>Solution</h1><p>先对 $G$ 求强连通分量，用 tarjan 算法即可。缩点，然后得到一个 DAG。如果最后的 DAG 只有一个节点，那么答案是 0 ，否则答案是 $max(indegree, outdegree)$，$indegree$ 和 $outdegree$ 分别表示入度为 0 的点的总数和出度为 0 的点的总数。</p>\n<h1 id=\"Proof\"><a href=\"#Proof\" class=\"headerlink\" title=\"Proof\"></a>Proof</h1><p>显然， $max(indegree, outdegree)$ 肯定是一个下界，因为至少需要这么多边才能完全消除入度为 0 的所有的点或者出度为 0 的所有的点。</p>\n<p>可以用归纳法来构造一组合理的解。 给定任意一个图 $G$，求它的强连通分量并且缩点得到一个 DAG，令这个 DAG 为 $D$。假设 $|D| \\ge 2$，否则答案很显然是 0。令 $X$ 和 $Y$ 分别表示 $D$ 中入度和出度为 0 的点集。令 $m = max(|X|, |Y|)$。通过对 $m$ 进行归纳，假设存在一种添加 $m$ 条边的解法让 $G$ 变得强连通。</p>\n<h3 id=\"First-m-1\"><a href=\"#First-m-1\" class=\"headerlink\" title=\"First: $m = 1$\"></a>First: $m = 1$</h3><p>此时，很显然有$|X| = |Y| = 1$。假设 $x$ 和 $y$ 分别是 $X$ 和 $Y$ 的唯一元素，那么只需要添加边 $(y, x)$ 即可。</p>\n<p>当$m \\ge 2$的时候，考虑 $2$ 个 case。</p>\n<h3 id=\"Case-1\"><a href=\"#Case-1\" class=\"headerlink\" title=\"Case 1:\"></a>Case 1:</h3><p>存在 $x \\in X$, $y \\in Y$ 使得 $D$ 不存在从 $x$ 到 $y$ 的路径。这时添加一条边 $(y, x)$。假设添加过边的新图为 $G’$，求它的强连通分支并且缩点得到一个DAG $D’$。可以断定 $D’ = D \\cup {(y, x)}$。原因很简单，如果 $D$ 的点集在添加边 $(y, x)$ 后发生了变化，唯一的可能是边 $(y, x)$ 构成了环，这说明有 $x$ 到 $y$ 的路径，矛盾。</p>\n<p>现在考虑新图 $G’$ 和它的 DAG $D’$，与 $D$ 相比，$D’$少了一个入度为 0 的点，也少了一个出度为 0 的点，所以 $m’ = m - 1$。根据归纳假设，需要再递归地添加 $m’ - 1$ 条边，加上 $(y, x)$ 本身，一共 $m$ 条。</p>\n<h3 id=\"Case-2\"><a href=\"#Case-2\" class=\"headerlink\" title=\"Case 2:\"></a>Case 2:</h3><p>不存在上述的 $x$ 和 $y$，这意味着在 DAG $D$中所有的 $x \\in X$ 都有到所有的 $y \\in Y$ 通路。这时可以随意取 $D$ 中出度为 0 的点 $y$ 和入度为 0 的点 $x$，添加边 $(y, x)$。如此重复 $m$ 次即可。需要注意的是，如果某个时候不存在出度为 0 的点，那么就在 $Y$ 中任取一点，如果不存在入度为 0 的点，就在 $X$ 中任取一点。一个合理的推论是，当上述操作完成后，有以下两个性质：</p>\n<p>i. 对于 $X$ 中的任何一点 $x$，存在某个 $y \\in Y$ 使得有边 $(y, x)$。</p>\n<p>ii. 对于 $Y$ 中的任何一点 $y$，存在某个 $x \\in X$ 使得有变 $(y, x)$。</p>\n<p>接着，需要证明，为什么这样随意的添加边之后 $D$ 会变得强连通（因此 $G$ 也就强连通了）。</p>\n<p>实际上，任取 $D$ 中的两个点 $a$ 和 $b$，首先一定存在某个 $y_1 \\in Y$（$y_1$ 可能是 $a$ 本身），使得有 $a$ 到 $y_1$ 的路径。其次，根据性质(ii)，存在某个 $x_1 \\in X$ 使得有边 $(y_1, x_1)$。再看点 $b$，容易知道一定存在某个 $x_2 \\in X$ 使得 $D$ 中存在 $x_2$ 到 $b$ 的路径($x_2$可能是 $b$ 本身)。再根据性质(i)，存在某个 $y_2 \\in Y$ 使得有边 $(y_2, x_2)$。最后，根据一开始的假设，$X$ 中的每个点都有到 $Y$ 中每个点的路径，即存在 $x_1$ 到 $y_2$ 的路径，于是找到了一条通路 $a \\rightsquigarrow y_1 \\rightarrow x_1 \\rightsquigarrow y_2 \\rightarrow x_2 \\rightsquigarrow b$。</p>\n","categories":["人生"],"tags":["算法"]},{"title":"【随笔】再看罗振宇的跨年演讲《时间的朋友》","url":"http://lzyrapx.xyz/2020/01/07/【随笔】再看罗振宇的跨年演讲《时间的朋友》/","content":"<h1 id=\"序\"><a href=\"#序\" class=\"headerlink\" title=\"序\"></a>序</h1><p>这是我第二次看罗振宇的跨年演讲了，第一次看他的跨年演讲是在 2015 年底，那是我大一的时候，那时也是他的首次跨年演讲。</p>\n<h1 id=\"陈年\"><a href=\"#陈年\" class=\"headerlink\" title=\"陈年\"></a>陈年</h1><p>尤记得我是在微信公众号上发现罗振宇的《罗辑思维》，听起来觉得特别有意思，给我一种全新的视野，而且可以安抚我焦虑的心情。当时还没有《得到》APP。说真的，罗振宇的确是能说会道，容易让人激动人心，沉浸其中。每次晚上回到宿舍都会听一下他的《罗辑思维》，听听鸡汤，给自己打打激素，这大概持续了大半年左右。</p>\n<p>但后来我恍然醒悟，发现听他的鸡汤并没有改变自己，也没有改变自己的现状，反而只会让我陷入莫名其妙的不自知中，会让我没有认清自己的处境和现实，有点被洗脑的感觉。于是后来就再也没听过《罗辑思维》，也没有听过罗振宇相关的演讲了。</p>\n<p>而我从根本上慢慢从「意淫」派转变到了「实践」派。</p>\n<h1 id=\"想法\"><a href=\"#想法\" class=\"headerlink\" title=\"想法\"></a>想法</h1><p>首先，其实我对罗振宇跨年演讲的观众没有任何成见，但我对罗振宇跨年演讲的套路和手段充满了成见。</p>\n<p>现在的《时间的朋友》已经不是当年的《时间的朋友》了，当年的《时间的朋友》满满是干货，而现在的只是一场演讲技巧的盛宴，而不是知识的盛宴。</p>\n<p>感觉就像吃了大量的碳水化合物，有很强的果腹感，很有收获感，但营养价值却很低，还很容易造成虚胖，还会让你膨胀，以为自己从中学会了很多，但大部分都是废话，而不是干货。更形象来说就像一盘水果罗卜切片，普通饭店叫“萝卜开会”，到了罗辑思维饭店，经过摆盘、点缀、雕花，然后叫“群英荟萃”。有害？不存在，又甜又脆，爽口解渴，挺好的，但还是那盘大萝卜。</p>\n<p>跨年演讲的一开头就充斥着大量又俗又赤裸裸的广告，罗振宇还为打广告强词说理。其实打广告可以理解，但特意解释一遍是为了什么呢。</p>\n<p>演讲全程讲今年发生的时间，把每年都有的偶发事件包装成黑天鹅事件，故意耸人听闻，夸大其词，贩卖焦虑。特意把一年里发生的事件包装一下，到了年底跨年演讲了，拉上历史事件一起强行总结一下，明明只是一个偶发事件却被罗振宇说得有理有道，到罗振宇这里就变成了一个不平凡的大事件，最后推出今年又是不平凡的一年。年年都不平凡。</p>\n<p>整场跨年演讲下来，我胸口仿佛憋了一口气。整整四个小时，我并没有获得了什么干货和提升，全是二手知识和快餐阅读文化，但我记住了罗振宇自己的个人品牌和他的企业品牌（得到APP），我觉得这才是罗振宇这场跨年演讲的真正目的吧。</p>\n<p>这完全是一场大型炒冷饭和商业广告推广的演讲，给全中国的知识分子们的一场装逼晚会，倒不如看看歌舞明星跨年演唱会，还能快乐和放松一下。</p>\n<p>最后，给大家一个建议。</p>\n<p><strong>高认知，以及平日里就经常学习的知识分子不必观看罗振宇的演讲，它适合平日里不怎么学习行业以外的知识和不怎么看书的群体。</strong></p>\n<p>不如把看罗振宇跨年演讲的四个小时，全花在「看书」上。</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>知识付费就像是毒品，你焦虑的时候吸一口，感觉浑身舒畅。问题是它只能缓解你的焦虑，不能根本上解决你的问题。所以你得隔一段时间就吸两口。等你不停地吸，然后有一天发现并不能解决你现实中的问题的时候，你就会发现这只是一个安慰剂而已。</p>\n<p>总得来说，就是一句话。</p>\n<p>「<strong>知识不在哪里，知识依然存在书本里。</strong>」</p>\n","categories":["生活"],"tags":["随笔"]},{"title":"【随笔】对房贷的分析与扯谈","url":"http://lzyrapx.xyz/2019/12/29/【随笔】对房贷的分析与扯谈/","content":"<h1 id=\"扯谈\"><a href=\"#扯谈\" class=\"headerlink\" title=\"扯谈\"></a>扯谈</h1><p>先入为主。先扯谈一下买房这事，再用数学分析一下怎么贷款比较合理。</p>\n<p>买房，可能是很多人一生中很重要的事情。</p>\n<p>如果你长期呆在国内，就国内这个形势，买房是真的没得选，这条路你必走。无论是因为通货膨胀，结婚，子女教育等，买房早就不是买房了，买的是相配套的资源，买的是跑赢 CPI (居民消费价格指数)，买的是资产保值增值，买的是户口，买的是学区，买的是居住权……那绝对不是钢筋混凝土那么简单了。</p>\n<p>理论上说，这是个愚蠢而疯狂的时代。</p>\n<p>我觉得靠房地产来带动中国经济发展是畸形的。房地产虽然是中国最大的实业，间接牵扯到各行各业，但无数人日日夜夜拼命干活就为了那一百多平米的房子，大部分人花光了大半辈子的积蓄或几个人的口袋去买一个使用期只有 $70$ 年的房子，想想就有点悲哀。这到底扼杀了多少人的创造力和生活品质了啊。虽然说中国的经济的确是增长很快，但想要达到欧美发达国家的水平也不是一蹴而就的，以我国人民的勤奋和智慧，肯定能赶超欧美发达国家，只是时间问题而已。但还是希望不久的将来，<strong>中国的虚拟经济可以赶超实体经济</strong>。</p>\n<p>但是生于中国，生活于这个时代，我们无法选择。</p>\n<p><strong>但作为新时代的年轻人，我们可以被房子压榨，但不能被房子打败</strong>。早早地背上房贷会限制你的平台和提升空间。除非你是炒房的。</p>\n<p>我们作为年轻人，拥有一套属于自己的房子，可以成为我们拼搏的动力，但实现梦想的过程需要我们<strong>看到更远的东西</strong>。比房子更有动力的是<strong>责任心</strong>，拥有希望把事情做好的动力，驱动着去做更多的事情，会得到很大的锻炼。</p>\n<p>只盯着房子带来的无穷压力，最后连一套房子都供不起，还把自己的青春过早消耗掉。<strong>不值得</strong>。</p>\n<p>如果盯着能够让自己获得更大提升的机遇与平台，也许到最后，你会发现买房并不是一件难事。</p>\n<p>就个人而言，虽然我现在也有能力在老家的市中心买个房子来养老，但是暂时没必要。我想趁年轻时看到更大的世界。不想只局限在一个城市。</p>\n<p>打个比方，<strong>我们的目标「可以」不是买房，而是如何在一个城市建造起属于自己的大厦。</strong> 反正如果你的眼光不在房子上，你可能会活得更好。</p>\n<p>无论在一线城市还是十八线小城市，绝大多数人是没有能力（也完全没必要）一次性全额付清的。全款买房可能会把中国里最好的金融杠杆的收益降到最低，因为人民币是会贬值的。如果你是土豪，当我没说。</p>\n<p>房贷有两种，<strong>商业贷款</strong> 和 <strong>公积金贷款</strong>， 它们的区别是贷款的利率不一样，公积金贷款利率要低一些。</p>\n<p>贷款方式又分两种，<strong>等额本金</strong> 和 <strong>等额本息</strong>。下面主要计算与分析一下这两种方式的优劣性。</p>\n<h1 id=\"房贷分析前提\"><a href=\"#房贷分析前提\" class=\"headerlink\" title=\"房贷分析前提\"></a>房贷分析前提</h1><p>不考虑<strong>人民币贬值</strong>，<strong>通货膨胀</strong>等不确定因素，纯数据分析。<br>如果要考虑，大概只能参考历年的数据，自己意会一下了。<br><strong>但是，完全依照过去的经验去预测未来，说不定就会掉沟里</strong>。因为在接下来的 $20$ 多年里，中国的经济不可能再像以前那样增长得那么快了。</p>\n<h1 id=\"贷款方式\"><a href=\"#贷款方式\" class=\"headerlink\" title=\"贷款方式\"></a>贷款方式</h1><p>贷款方式有两种：<strong>等额本金</strong> 和 <strong>等额本息</strong>。</p>\n<h2 id=\"等额本金\"><a href=\"#等额本金\" class=\"headerlink\" title=\"等额本金\"></a>等额本金</h2><p>等额本金就是：每个月偿还一样的本金，利息按照剩余本金 x 月利率计算。这种贷款情况下，月供会随着本金减少而越来越少。</p>\n<p>计算公式也很简单：<br>$$月还款=\\frac{总贷款}{总还款月数}+剩余本金*月利率$$</p>\n<p>也可以写成：<br>$$月还款=\\frac{总贷款}{总还款月数}+(总贷款 - 累计已还本金总额)*月利率$$</p>\n<p>比如等额本金贷款 $300$ 万，年利率 $4.9$%，贷款 $30$ 年，第 $1$ ～ $3$个月的月供分别是：<br>$$第一个月=\\frac{3000000}{360}+\\frac{3000000*4.9\\%}{12}\\approx 20583$$</p>\n<p>$$第二个月=\\frac{3000000}{360}+\\frac{(3000000-\\frac{3000000}{360})*4.9\\%}{12}\\approx 20549$$</p>\n<p>$$第三个月=\\frac{3000000}{360}+\\frac{(3000000-\\frac{3000000}{360} * 2)*4.9\\%}{12}\\approx 20515$$</p>\n<p>$$…$$</p>\n<p>直观的柱状图：<br><img src=\"/images/%E7%AD%89%E9%A2%9D%E6%9C%AC%E9%87%91.png\" alt=\"等额本金\"></p>\n<h2 id=\"等额本息\"><a href=\"#等额本息\" class=\"headerlink\" title=\"等额本息\"></a>等额本息</h2><p>现在大部分人都是选择<strong>等额本息</strong>的贷款方式。因为这种贷款模式下，<strong>前期的还款压力会比较小</strong>。</p>\n<p><strong>等额本息每个月的月供（本金+利息）是一样的</strong>。计算公式也比等额本金要复杂。</p>\n<p>可以推导一下：</p>\n<p>设贷款总额为 $A$，银行月利率为 $\\beta$，总期数为 $m$ 个月，每个月供设为 $X$ ，则各个月欠银行的贷款为：</p>\n<p>$$第一个月: A_1 = A(1+\\beta)-X$$</p>\n<p>$$第二个月: A_2 = A_1(1+\\beta)-X=[A(1+\\beta)-X](1+\\beta)-X=A(1+\\beta)^2-X[1+(1+\\beta)]$$</p>\n<p>$$第三个月: A_3 = A_2(1+\\beta)-X=A(1+\\beta)^3-X[(1+\\beta)^2+(1+\\beta)+1]$$</p>\n<p>$$…$$</p>\n<p>因此，第 $n$ 个月欠银行的贷款为：</p>\n<p>$$A_n=A_{n-1}(1+\\beta)-X=A(1+\\beta)^n-X[1+(1+\\beta)+(1+\\beta)^2+…+(1+\\beta)^{n-1}] = A(1+\\beta)^n-\\frac{X[(1+\\beta)^{n}-1]}{\\beta}$$</p>\n<p>因为还款总期数为 $m$，即第 $m$ 个月刚好把银行贷款还完，因此有：<br>$$A_m = A(1+\\beta)^m-\\frac{X[(1+\\beta)^m-1]}{\\beta} = 0$$</p>\n<p>可得：<br>$$X = \\frac{A\\beta(1+\\beta)^m}{(1+\\beta)^m-1}$$</p>\n<p>如果是等额本息贷款 $300$ 万，年利率 $4.9$%，贷款 $30$ 年，每个月的月供为：<br>$$每个月月供=\\frac{3000000*\\frac{4.9\\%}{12}*(1+\\frac{4.9\\%}{12})^{360}}{(1+\\frac{4.9\\%}{12})^{360}-1}\\approx 15922$$</p>\n<p>直观的柱状图：<br><img src=\"/images/%E7%AD%89%E9%A2%9D%E6%9C%AC%E6%81%AF.png\" alt=\"等额本息\"></p>\n<h2 id=\"两种贷款方式的优劣性\"><a href=\"#两种贷款方式的优劣性\" class=\"headerlink\" title=\"两种贷款方式的优劣性\"></a>两种贷款方式的优劣性</h2><h3 id=\"等额本金-1\"><a href=\"#等额本金-1\" class=\"headerlink\" title=\"等额本金\"></a>等额本金</h3><h4 id=\"优势\"><a href=\"#优势\" class=\"headerlink\" title=\"优势\"></a>优势</h4><ul>\n<li>还款利息比等额本息低大概10%（纯商贷条件下）</li>\n<li>提前还款的话比等额本息花费更少的钱</li>\n<li>后期还款压力小<h4 id=\"劣势\"><a href=\"#劣势\" class=\"headerlink\" title=\"劣势\"></a>劣势</h4></li>\n<li>前期还款压力大，基本上前10年等额本金的月供都会比等额本息要高，后面会越来越少</li>\n</ul>\n<h3 id=\"等额本息-1\"><a href=\"#等额本息-1\" class=\"headerlink\" title=\"等额本息\"></a>等额本息</h3><h4 id=\"优势-1\"><a href=\"#优势-1\" class=\"headerlink\" title=\"优势\"></a>优势</h4><ul>\n<li>前期还款压力小，后期的话也不会变大<h4 id=\"劣势-1\"><a href=\"#劣势-1\" class=\"headerlink\" title=\"劣势\"></a>劣势</h4></li>\n<li>还款利息比等额本金高，在贷款 $300$ 万、$4.9$% 年利率、$30$ 年还款期间条件下，会比等额本金多还 $52$ 万。</li>\n</ul>\n<h4 id=\"其他对比\"><a href=\"#其他对比\" class=\"headerlink\" title=\"其他对比\"></a>其他对比</h4><ul>\n<li>在前期，等额本金的月供都会比等额本息高</li>\n<li>不提前还款的情况下，在前期，等额本金的总花费都会比等额本息高，在后期，等额本息的总花费则会更高</li>\n<li>随时还款时间拉长，等额本息提前还款的总花费会比等额本金提前还款的总花费越来越多</li>\n</ul>\n","categories":["人生"],"tags":["随笔"]},{"title":"【随笔】2019年度总结","url":"http://lzyrapx.xyz/2019/12/26/【随笔】2019年度总结/","content":"<h1 id=\"上半年\"><a href=\"#上半年\" class=\"headerlink\" title=\"上半年\"></a>上半年</h1><p>感觉这一年过得特别漫长，应该是经历了很多事的原因吧。觉得自己已经毕业好几年一样，但其实是今年才毕业，也只是一个乳臭未干的小子罢了。</p>\n<p>今年上半年基本都是一边实习一边把毕设做完，上半年确实是挺开心的，起码那时拥有的比现在的要多。</p>\n<p>先说说在北京实习的那段时间吧，当时的我几乎每天都在晚上九点左右下班，然后健身一个小时再回家。</p>\n<p>因为住的是实习生宿舍，离公司特别近，所以周末也会有一天选择回到公司学习和准备考试，另外一天就用来做做毕业设计和写写毕业论文。</p>\n<p>当时确实是很充实，因为自己也真的学到了很多东西和经验，也经常会和一个挺棒的人聊聊天。但因为要毕业季的原因，学校破事也格外地多，经常北京，广州两地飞。</p>\n<p>说实话，挺累的，不过也值得。</p>\n<p>有一段时间因为自己的一时冲动，跟一个人透露了自己的心思，可能是心情低落，自己也就没什么心思工作，干脆就回学校专心做毕业设计去了。</p>\n<p>论文答辩完之后，为了去广州，拒绝了一个免费报销的比赛和错过了 PE 的新题。如果不去广州，可能已经拿到 PE 第一个 Gold Medal 了，因为那个题是一眼题，我晚到十分钟还拿到了top 10，还是很有信心拿到 FB 的…但我也没有后悔去广州。因为其实己是怀着内疚去的。离开广州后回学校拿毕业证，终于也顺利毕业了。接着去了一趟深圳，主要是想看看这个城市吧，逛完后就离开了，然后跑去了上海。</p>\n<p>总而言之，上半年那段日子是真的很美好。</p>\n<h1 id=\"下半年\"><a href=\"#下半年\" class=\"headerlink\" title=\"下半年\"></a>下半年</h1><p>下半年也是魔幻的半年。虽然经常出去旅游，但却感觉特别难熬。可能是我和一个人闹僵了的原因，也可能是要上班的原因，或者其他原因。</p>\n<p>这里就不写流水账了。下半年除了旅游，一般只在上海北京两地跑，偶尔回一下广东。</p>\n<p>看书看 papers 比以前的都多，健身比以前都勤，出去玩的次数也多，各种收入也比以前增加了很多，可能是学了一段时间投资和理财的原因?…百度在2020年到来之前也终于把拖了三个月的奖金发了…看似得到了很多，但好像却失去了一些更重要的东西。可能这就是命吧，有失必有得。</p>\n<p>「上帝是公平的。在你得到什么的同时，其实你也在失去。」</p>\n<p>这半年，我收获了很大的自我提升，金钱收入和其他社会资源与关系，但却失去了感情和友谊。</p>\n<p>所以这下半年，让我懂得一个很重要的道理。</p>\n<p>做事需三思，且行且珍惜。珍惜身边的每一个人。</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>2019 年比往年都忙了许多，毕竟已经成为了社畜，而不是学生，但再次成为学生的时候，一定要倍加努力。</p>\n<p>认识的朋友里，有出国进修的，有结婚生子的，有美帝转战欧洲的，有去追求学术的，有学术界转工业界的，也有继续冲击世界总决赛的…反正身边的人都很优秀…而我，好像一无所有，只在几个大城市奔波了好几趟，可能我今年的飞行里程可以绕地球两圈半了。</p>\n<p>最近老是有朋友说我家里有矿…其实我家只是一个普通家庭而已…我很穷的…</p>\n<p>遗憾当然很多。比如从上半年开始就想着去欧洲看 S9 总决赛，顺便可以把它当成毕业旅游，最后还是没去成。虽然最后去了大阪当作毕业旅游了，但却不够尽兴。家人暂时也无法回去看望，只能遥隔上千公里的电话中听听关心和唠叨一下。因为自己的冲动和一个人的关系闹僵了。失去了重要因素，很多计划都因此泡汤，无法进行下去了。很久没有玩游戏了，感觉失去了青春…</p>\n<p>这一年也是读了很多 papers 和书籍，在自己的各种自我提升上，可能是收获最多的。</p>\n<p>下半年也极大地减少了看朋友圈和手机的次数，可能暂时没有想要聊天的人了，也可能是没什么期待了，</p>\n<p>感觉一天最舒适就是，一下班就去健身，健身完回到家，趟在沙发上，一边撸着猫咪一边拿着 Kindle 看书。</p>\n<p>有失必有得，遗憾之下也生出许多希望和对未来的展望。</p>\n<p>这个时间段，沉默其实是好事。因为正是闷声发大财之际。原始积累正在进行，各路兵马都在蓄积力量，等待爆发的时机。</p>\n<p>希望多年在「茅庐」中积累的经验与投资的时间和精力，在不久的未来遇到「千载难逢的机遇」时能发挥其作用。</p>\n<p>最后, 2020 年是党和国家全面建设小康社会的一年。希望家人和朋友们都实现小康！</p>\n<p>「愿你我活得更好。」</p>\n<p align=\"right\">写于二零一九年十二月二十七日早上七点二十三分</p>\n","categories":["人生"],"tags":["随笔"]},{"title":"【数学】primitive pythagorean triples 计数拓展","url":"http://lzyrapx.xyz/2019/12/17/【数学】primitive-pythagorean-triples-计数拓展/","content":"<h1 id=\"Problem\"><a href=\"#Problem\" class=\"headerlink\" title=\"Problem\"></a>Problem</h1><p>毕达哥拉斯三元组（pythagorean triples）包含有三个整数 $a$, $b$ 和 $c$，满足等式 $a^2+b^2=c^2$。好吧。其实就是人尽皆知的勾股定理。当 $a$, $b$ 和 $c$ 互素时，这个毕达哥拉斯三元组（pythagorean triples）就是 primitive 的。令 $P(n)$ 是满足 $a &lt; b &lt; c \\le n$ 的 primitive pythagorean triple 的数目。记 $q$ 和 $p$ 互素，当且仅当 $gcd(q, p) = 1$, $gcd$ 为最大公约数。<br>(1) 求 $P(10^9)$。<br>(2) 求 $P(10^{18})$。</p>\n<h1 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h1><p>$P(20) = 3$，这三个分别是 $(3,4,5)$, $(5,12,13)$ 和 $(8,15,17)$.</p>\n<h1 id=\"Solution\"><a href=\"#Solution\" class=\"headerlink\" title=\"Solution\"></a>Solution</h1><p><strong>（1）</strong> 对于 primitive pythagorean triple，即 $a^2+b^2=c^2, a &gt; 0, b &gt; 0, c &gt; 0$，可以构造成：<br>$$\\left\\{\\begin{aligned}a &amp;= 2mn\\\\b &amp;= m^2-n^2\\\\c &amp;= m^2+n^2\\end{aligned}\\right.$$<br>其中，$m &gt; n &gt; 0$，$\\gcd(m,n)=1$，$m \\bmod 2 \\not= n \\bmod 2$.</p>\n<p>可以直接对 primitive pythagorean triple 进行计数，从 $2$ 到 $\\left \\lfloor \\sqrt{10^9} \\right \\rfloor$, 遍历 $m$.</p>\n<p>如果 $m$ 是偶数，计算 $ \\{w | \\gcd(m, w) = 1 \\text{ and } 0 &lt; w &lt;= \\min(\\sqrt{10^9-m^2}, x - 1) \\}$ 的所有元素个数 $SumA$。</p>\n<p>如果 $m$ 是奇数，计算 $\\{ w | \\gcd(m, w) = 1 \\text{ and } 0 &lt; w &lt;= \\frac{\\min(\\sqrt{10^9-m^2}, x - 1)}{2} \\}$ 的所有元素个数 $SumB$。</p>\n<p>综上，$$\\left\\{\\begin{aligned} P(N) &amp;= SumA + SumB\\\\N &amp;= 10^9\\end{aligned}\\right.$$</p>\n<p>答案：<strong>$P(10^9) = 159154994.$</strong></p>\n<p><strong>（2）</strong> 由 (1) 知，对于 primitive pythagorean triple，即 $a^2+b^2=c^2, a &gt; 0, b &gt; 0, c &gt; 0$，可以构造成：<br>$$\\left\\{\\begin{aligned}a &amp;= 2mn\\\\b &amp;= m^2-n^2\\\\c &amp;= m^2+n^2\\end{aligned}\\right.$$<br>其中，$m &gt; n &gt; 0$，$\\gcd(m,n)=1$，$m \\bmod 2 \\not= n \\bmod 2$.</p>\n<p>令 $N = 10\b^{18}$, $N_{s}=\\left\\lfloor\\sqrt{N}\\right\\rfloor$, $N_{s2}=\\left\\lfloor\\sqrt{\\frac{N}{2}}\\right\\rfloor$</p>\n<p>所以需要计算的是 $n \\le \\text{Min}(m-1,\\left\\lfloor\\sqrt{N-m^2}\\right\\rfloor)$ 中 $m$ 与 $n$ 的互素对数。</p>\n<p>设 $f(m,r)=\\sum_{d|m}\\mu(d)\\frac{r}{d}$ 为在 $[1, r]$ 中和 $m$ 互素的元素个数。可以将 $P(N)$ 分成四部分进行计算再合并。</p>\n<h2 id=\"Part-1\"><a href=\"#Part-1\" class=\"headerlink\" title=\"Part 1\"></a>Part 1</h2><p>对于 $m$ 是偶数，$2m^2 \\le N$，$n \\le m-1$ 的情况，因为没有偶数和 $m$ 互素，并且 $m - n$ 为奇数，所以部分和 $m$ 互素的元素个数为 $\\varphi(m)$。<br>$$P_1=\\sum_{m=2,even}^{N_{s2}}\\varphi(m)=\\sum_{d=2,even}^{N_{s2}}\\frac{\\mu(d)}{d}\\sum_{k=1}^{\\left\\lfloor\\frac{N_{s2}}{d}\\right\\rfloor}kd$$</p>\n<h2 id=\"Part-2\"><a href=\"#Part-2\" class=\"headerlink\" title=\"Part 2\"></a>Part 2</h2><p>对于 $m$ 是奇数，$2m^2 \\le N$，$n \\le m-1$ 的情况，因为 $m$ 是奇数，$n$ 肯定是偶数，所以计算的是 $[1,m]$中和 $m$ 互素的偶数的个数，因此也只需要计算 $[1,\\frac{m}{2}]$ 中和 $m$ 互素的的元素个数，即 $f(m,\\frac{m}{2})$.<br>$$P_2=\\sum_{m=3,odd}^{N_{s2}}\\sum_{d|m}\\mu(d)\\frac{n/2}{d}=\\sum_{d=1,odd}^{N_{s2}}\\frac{\\mu(d)}{d}\\sum_{k=1}^{\\left\\lfloor\\frac{N_{s2}}{d}\\right\\rfloor}\\frac{kd}{2}$$</p>\n<h2 id=\"Part-3\"><a href=\"#Part-3\" class=\"headerlink\" title=\"Part 3\"></a>Part 3</h2><p>对于 $m$ 是偶数，$2m^2 &gt; N$ 的情况，因为 $n \\le \\left\\lfloor\\sqrt{N-m^2}\\right\\rfloor$，对于特定 $m$，在范围$ [1,\\left\\lfloor\\sqrt{N-m^2}\\right\\rfloor]$ 中与 $m$ 互素的元素个数为 $f(m,\\left\\lfloor\\sqrt{N-m^2}\\right\\rfloor)$.<br>$$P_3=\\sum_{m=N_{s2}+1,even}^{N_s}\\sum_{d|m}\\mu(d)\\frac{\\left\\lfloor\\sqrt{N-m^2}\\right\\rfloor}{d}$$<br>$$P_3=\\sum_{d=1,odd}^{N_S}\\mu(d)\\sum_{k=(N_{s2}+1)/d,even}^{N_s/d}\\frac{\\left\\lfloor\\sqrt{N-d^2k^2}\\right\\rfloor}{d}+\\sum_{d=2,even}^{N_S}\\mu(d)\\sum_{k=(N_{s2}+1)/d,odd}^{N_s/d}\\frac{\\left\\lfloor\\sqrt{N-d^2k^2}\\right\\rfloor}{d}$$</p>\n<h2 id=\"Part-4\"><a href=\"#Part-4\" class=\"headerlink\" title=\"Part 4\"></a>Part 4</h2><p>对于 $m$ 是奇数，$2m^2 &gt; N$ 的情况，因为 $n \\le \\left\\lfloor\\sqrt{N-m^2}\\right\\rfloor$，类似 <strong>Part 2</strong>，计算 $[1,\\left\\lfloor\\sqrt{N-m^2}\\right\\rfloor]$ 中和 $m$ 互素的偶数的个数<strong>等价于</strong>计算 $[1,\\frac{\\left\\lfloor\\sqrt{N-m^2}\\right\\rfloor}{2}]$ 中和 $m$ 互素的的个数, 即 $f(m,\\frac{\\left\\lfloor\\sqrt{N-m^2}\\right\\rfloor}{2})$.<br>$$P_4=\\sum_{m=N_{s2}+1,odd}^{N_s}\\sum_{d|m}\\mu(d)\\frac{\\left\\lfloor\\sqrt{N-m^2}\\right\\rfloor/2}{d}$$<br>$$P_4=\\sum_{d=1,odd}^{N_s}\\mu(d)\\sum_{k=(N_{s2}+1)/d,odd}^{N_s/d}\\frac{\\left\\lfloor\\sqrt{N-d^2k^2}\\right\\rfloor/2}{d}$$</p>\n<p>综上，$$\\left\\{\\begin{aligned} P(N) &amp;= P_1 + P_2 + P_3 + P_4.\\\\N &amp;= 10^{18}\\end{aligned}\\right.$$</p>\n<p>答案：<strong>$P(10^{18}) = 159154943091887752.$</strong></p>\n","categories":["人生"],"tags":["数学"]},{"title":"【随笔】东京-北海道印象","url":"http://lzyrapx.xyz/2019/12/14/【随笔】东京-北海道印象/","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>「你为什么都在玩」一个朋友这样对我说。</p>\n<p>但其实我平时很勤奋的！只是「Work Hard, Play Harder」。</p>\n<p>但严格来说，这也真的不是在「玩」。</p>\n<p>这是一种「生活态度」。只是想多看看这个美好的世界。</p>\n<p>其实，也可以称之为「现代浪漫的消费主义」。</p>\n<h1 id=\"印象\"><a href=\"#印象\" class=\"headerlink\" title=\"印象\"></a>印象</h1><ul>\n<li><p>日本的人口密度是很高的，特别是在关东地区，但是北海道的人口密度却很低。在日本，北海道是一个地广人稀，生活恬静的地方。感觉这是一个很适合我长期居住的地方。</p>\n</li>\n<li><p>日本人是真的挺爱干净的，不仅仅是街道和河水，公共场所没有垃圾，垃圾桶都很少见到，就连驻在北海道支笏湖湖边的温泉度假酒店「鹤雅水之歌」，需要脱了鞋才能进酒店。爱干净程度可见一斑。</p>\n</li>\n<li><p>东京的北京烤鸭比北京的便宜，但是没有北京的好吃。</p>\n</li>\n<li><p>如果东京自由女神像后面没有彩虹桥，会给人以为是纽约自由女神像和哈德逊河的感觉。</p>\n</li>\n<li><p>无论是中国还是日本，临近圣诞节，都会给人一种圣诞节气氛。</p>\n</li>\n<li><p>浴室里放个小凳子，坐着洗澡原来这么舒服。</p>\n</li>\n<li><p>本来想约东大日本人网友 Min_25 出来的，感谢他经常回答我的数学问题，但是人家忙于科研，确实是不太好意思。遂鸽。</p>\n</li>\n<li><p>餐厅和酒店里挺多服务员都是老人，进进出出老人家总是鞠躬，搞得很不好意思。</p>\n</li>\n<li><p>大部分日本人都很热情，会努力给游客提供帮助。他们多少会一点英语，但是发音比较难懂，而且连不成句。说日语，他们会更热情。</p>\n</li>\n<li><p>路上几乎没有宝马奔驰奥迪，大部分是日系的超小型两箱轿车或小面包车。</p>\n</li>\n<li><p>北海道的牛奶和冰淇淋非常好吃。但还是更喜欢吃寿司和刺身，还有拉面。</p>\n</li>\n<li><p>支笏湖湖水真的非常清澈，而且当泡完温泉出来后喝的水其实就是支笏湖湖水。听说支笏湖湖面在气温降至零下十几度的时候依旧不冻。这个真没机会看到了。如果是二月初来，这里还会有一个「支笏湖冰涛节」。可惜可惜。</p>\n</li>\n<li><p>小樽运河。原先的红砖仓库群被改造成工艺小商品市场、各式风味餐厅。到了夜晚，华灯初上，沿河边那一盏盏点亮的煤气灯给人温馨和浪漫的感觉。市场中人头攒动，餐厅里举杯对饮，沿河边一簇簇人来人往的身影，竟成了一道亮丽的风景。</p>\n</li>\n<li><p>在札幌，特地来到野幌森林公园里的北海道开拓村，在这里不但可以看到很多雪景，同时还可看到很多移建于此的日本历史性建筑。</p>\n</li>\n<li><p>泡在温泉里，闭上眼睛，感觉什么压力，烦恼和忧虑都烟消云散。</p>\n</li>\n<li><p>没有时间去函馆看夜景。可惜可惜。</p>\n</li>\n<li><p>第一场国外滑雪成就达成，天空下着小雪，滑着雪的感觉真好。</p>\n</li>\n<li><p>雪，你是那么的洁白无暇，那么的轻盈飘逸，那么的洒洒脱脱。你表面冰冷，内心却非常温暖。这不正是我吗？我滑我自己。</p>\n</li>\n<li><p>还有很多印象深刻的地方和感受，大概是只可意会不能言传的吧。</p>\n</li>\n</ul>\n<h1 id=\"后言\"><a href=\"#后言\" class=\"headerlink\" title=\"后言\"></a>后言</h1><center>「昔去雪如花，今来花似雪」。</center>\n\n<p>这次因为时间上有点匆忙，很多地方都没看到。如无意外，下次应该还会再次拜访。<br>希望下次圣诞节期间再来北海道，而且不是几个人来，而是「两个人」来。</p>\n<center>あの日見わたした渚 </center>\n<center>今も思い出すんだ</center>\n<center>砂の上に刻んだ言葉</center>\n<center>君の後ろ姿</center>\n<center>寄り返す波が足元をよぎり</center>\n<center>何かをさらう</center>\n<center>夕凪の中</center>\n<center>日暮れだけが通り過ぎてゆく</center>\n<center>パッと光って咲いた 花火を見てた</center>\n<center>きっとまだ終わらない夏が</center>\n<center>曖昧な心を</center>\n<center>解かして繋いだ</center>\n<center>この夜が続いて欲しかった</center>\n\n\n\n","categories":["人生"],"tags":["随笔"]},{"title":"【随笔】区块链的时代真的会来临吗？","url":"http://lzyrapx.xyz/2019/12/08/【随笔】区块链的时代真的会来临吗？/","content":"<p><strong>「一个人的命运，当然要靠自我奋斗，但也要考虑到历史的进程。」</strong><br>这句话和被无数创业者奉为经典的雷军金句 -「站在风口上，猪都可以飞起来」有点异曲同工。</p>\n<h1 id=\"序言\"><a href=\"#序言\" class=\"headerlink\" title=\"序言\"></a>序言</h1><p>首先，我不会在这里谈区块链里面的技术，也不会告诉你怎么用区块链技术去给你带来收益。因为我不是专业的。</p>\n<h1 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h1><p>从2017年到2019年底，除了2017年初和2018年初许多数字货币出现了大面积腰斩，区块链在全球的发展趋势不减反增，人们至今蜂拥而至，特别是2019年10月24日，国家明确表示，要把区块链作为核心技术自主创新的重要突破口，鼓励并加大力度推动区块链技术发展。不仅如此，炒币，ICO，传销，空投，诈骗，技术革命，黑科技，生产力，这些词语在交替出现，轮番刺激着炒币的，创业的，投机的人们的神经，无论是迷茫的投资精英，跃跃欲试的创业者，还是虔诚的技术信徒，每一个人都笃信着一个观念，那就是，<strong>「机会绝对不能错过」</strong>。</p>\n<p>无论是比特币还是以太坊这些让人趋之若鹜的数字货币，它们的最底层，都是区块链。区块链的早期布道者们试图让人们相信，区块链技术可以和传统的中心化系统相抗衡，并且区块链技术还可以真正意义上解决信任和安全问题。他们要让整个世界，整个市场认为，区块链是可以改变全世界的黑科技之一。</p>\n<p><strong>区块链是如何解决信任和安全问题的呢？</strong></p>\n<p>是这样的。区块链系统中会有多个节点，没有中心节点，每一节点都有完整的数据记录，任何一个节点发生篡改，都会和其他节点发生冲突，并且篡改会马上被暴露和验证，认为这是不合法的交易，最后将篡改的内容抛弃掉。这就好像是，你和你女(男)朋友立下了爱情承诺书并且被打印了很多份，家人亲戚朋友们手里都各有一份，一旦你劈腿了，就会自动有一个人或者一群人拿着承诺书来对你展开道德批斗，最后被抛弃。换成金融上的例子大概也是这样。<br>乍看具有这样特性的区块链技术的确能解决安全和信任的问题。每一个人都有可能成为一个节点，面对数量极大的节点，没有人可以控制，也没有人可以一次性篡改全部节点。<br>当然，解决信任和安全问题只是区块链的好处之一，此处不一一细讲了。</p>\n<p><strong>问题是，区块链技术能不能给你带来收益？</strong></p>\n<p>我相信，任何一个普通人，在无利可图的时候，都不会耗费时间，精力，金钱，去搭建一个区块链节点。主要原因还是「因为人性是懒惰的」。<br>既然这么多人甚至国家都想搞这个区块链技术，那区块链确实可以给个人和国家带来好处。所以可以认为拥有区块链节点是一个有收益的行为。但是并不是拥有节点就能给你带来收益，拥有区块链节点只是给你带来收益的前提。比如对于应用于虚拟币的区块链，会取决于「算力」这个因素，普通人的「算力」相比商人和资本下的「算力」根本就不足一提。所以，区块链技术不一定能给你带来收益。</p>\n<p><strong>既然这样，为什么还有这么多人和国家推崇区块链呢？</strong></p>\n<p>因为区块链的应用场景太广泛了。区块链技术最让老百姓记忆深刻，最接地气的产物就是虚拟货币，比如比特币，以太坊，莱特币等。其实区块链可以应用于金融，制造业，教育，娱乐，政府，零售业，医疗卫生，保险安全，甚至可以应用于军事和解决美元霸权问题上，这些应用都只是冰山一角，还有很多我也不了解的行业和应用场景。另外，目前能够改变全世界的几项技术，包括人工智能，区块链，量子计算机，5G通信，生物医药。除了5G通信和区块链，中国在其他技术方面基本被资本主义国家吊打，5G技术已经被菊花厂掌握了，只有区块链还是未知的。</p>\n<p><strong>既然区块链这么牛逼，那么区块链新时代是不是会来临？</strong></p>\n<p>会。但路漫漫其修远兮。君不见 Facebook 新推出的 Libra 举步维艰。有了国家扶持的区块链技术确实会带来很大的机遇，同时泡沫也很大。简而言之，「区块链的好日子可能会迟到，但不会缺席。」</p>\n<h1 id=\"结尾\"><a href=\"#结尾\" class=\"headerlink\" title=\"结尾\"></a>结尾</h1><p>最后还是要不好意思地承认，区块链技术带来的机遇，我还是挺觊觎的。2020年上半年，我可能会花一点时间再深入研究一下区块链。在这波热潮中，学一波各种领域的东西也蛮好的。不过有时候会觉得自己挺无耻的，自己明明不相信区块链，但还是会和朋友聊一波区块链的应用场景和挖掘当今潜在的用户需求。不过，我能把话说明白，给别人讲清楚道理，最后不去坑害别人，达到互惠互利的目的。这样我赚点收益也不违背良心，毕竟都是为了以后能做自己想做的事，去想去的地方。写到这，我也不由得脱口而出，<strong>区块链牛逼</strong>(破音)。</p>\n","categories":["人生"],"tags":["随笔"]},{"title":"【随笔】终焉与起始","url":"http://lzyrapx.xyz/2019/12/05/【随笔】终焉与起始/","content":"<h1 id=\"序\"><a href=\"#序\" class=\"headerlink\" title=\"序\"></a>序</h1><p>「怎样才能尽快开始新的生活呢？」这个问题一直在我的脑海里困扰了两个多月。</p>\n<p>威廉.布里奇斯在《转变》中有这样提到，转变需要经历三个阶段：<strong>结束-迷茫-重生</strong>。大部分人都希望能够直接跨过前面两个阶段，马上开始新生活。哪怕是积极的变化，也总是包含着结束。虽然结束总是会让人痛苦，因为结束里包含了失去。无论是失去一个人，失去一个身份，失去一段关系，亦或是一段时光，这些失去都会让人痛苦，归根结底是因为我们在结束中失去了一部分旧的弱的自我。</p>\n<p>其实最不寒而栗的是，哪怕理智早已知道了心里的那点念想是一点点虚幻的希望，可这点虚幻的希望宛如夜空上的一颗星星，它还能用来抵抗黑夜，对抗孤独，但一旦承认了结束，就是从心底里承认自己已经永远失去了所爱之人。</p>\n<h1 id=\"终焉\"><a href=\"#终焉\" class=\"headerlink\" title=\"终焉\"></a>终焉</h1><p>「其实你已经知道了答案，只是你怕疼。」写着写着，突然想起了这样的一句话。</p>\n<p>其实无论是什么关系，在它结束之前，我们是会怕疼的，因为心理上还是会希望这段关系会延续吧。就像明知道没有结果，却不能果断地结束，幻想出现奇迹，来解决现在所有的问题。如果从心理学上来说，这只是沉没成本在作怪，也有一些逃避的想法。也许有一些人在面对结束时的表现是截然不同的，但人的本性是会随基因代代遗传的，大致上心理也会是相同的吧。</p>\n<p>张惠言在他的《相见欢·年年负却花期》里这样写到，「梅花雪，梨花月，总相思。自是春来不觉去偏知。」觉得这里的「花」特别有意思，但却又有一种凝噎的感觉。</p>\n<p>另外，在《朝花夕誓——于离别之朝束起约定之花》（さよならの朝に约束の花をかざろう）这部电影里，花也是有着特殊含义的，而在电影中，出现过且含有特殊意义的花有两种。</p>\n<p>一种是克里姆送给蕾莉亚的紫色花朵，根据美术监督东地和生的说法，这种花只存在于伊欧夫，在晚上盛开发光，同时也是一种染料，其实这花在现实世界的原型是「瑠璃唐草」。花语是「可憐」，既惹人怜爱的意思。</p>\n<p>另一种则是「蒲公英」，那代表着「真心の愛」和「別離」。</p>\n<p>每一个人心里都有着一朵花，可能不是「瑠璃唐草」，也可能不是「蒲公英」，但我想着，那肯定是绽放之花。</p>\n<p>也许我心里的那朵花，在十一月十四日，当我把某个明星歌手的演唱会门票扔到垃圾桶的时候，大概已经枯萎了吧。</p>\n<p>但是我还是希望这朵花可以在另一个人心里重新绽放并且不要再花谢了。</p>\n<p>你会幸福的。我们都有自己美好的明天。</p>\n<h1 id=\"起始\"><a href=\"#起始\" class=\"headerlink\" title=\"起始\"></a>起始</h1><p>「重生不是从失去中长出来的，它也不该是新的希望，也不该是喜悦。但它一定值得铭记。」这不是谁说的，这是我说的。</p>\n<p>「终有焉时，向死而生。」</p>\n<p>结束也许也是一种开始吧。</p>\n<center>也许世界就这样</center>\n<center>我也还在路上</center>\n<center>没有人能诉说</center>\n<center>也许我只能沉默</center>\n<center>眼泪湿润眼眶</center>\n<center>可又不甘懦弱</center>\n<center>低着头 期待白昼</center>\n<center>接受所有的嘲讽</center>\n<center>向着风 拥抱彩虹</center>\n<center>勇敢的向前走</center>\n<center>黎明的那道光</center>\n<center>会越过黑暗</center>\n<center>打破一切恐惧我能</center>\n<center>找到答案</center>\n<center>哪怕要逆着光</center>\n<center>就驱散黑暗</center>\n<center>丢弃所有的负担</center>\n<center>不再孤单</center>\n<center>不再孤单</center>\n\n\n\n","categories":["人生"],"tags":["随笔"]},{"title":"about","url":"http://lzyrapx.xyz/about/index.html","content":"","categories":[],"tags":[]},{"title":"category","url":"http://lzyrapx.xyz/category/index.html","content":"","categories":[],"tags":[]},{"title":"","url":"http://lzyrapx.xyz/css/personal-style.css","content":"html.page-home {\n    position: absolute;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    /* background-image: url('/images/bg.jpg'); */\n    background-color: transparent;\n    background-size: cover;\n    background-position: center center;\n    background-repeat: no-repeat;\n  \n    background: linear-gradient( #1abc9c, transparent), linear-gradient( 90deg, skyblue, transparent), linear-gradient( -90deg, coral, transparent);\n    background-blend-mode: screen;\n  \n    /* background: linear-gradient(to left, #5f2c82, #49a09d); */\n  }","categories":[],"tags":[]},{"title":"link","url":"http://lzyrapx.xyz/link/index.html","content":"","categories":[],"tags":[]},{"title":"tag","url":"http://lzyrapx.xyz/tag/index.html","content":"","categories":[],"tags":[]},{"title":"project","url":"http://lzyrapx.xyz/project/index.html","content":"","categories":[],"tags":[]},{"title":"search","url":"http://lzyrapx.xyz/search/index.html","content":"","categories":[],"tags":[]}]